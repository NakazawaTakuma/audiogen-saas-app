This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
components/AccountCard.module.css
components/AccountCard.tsx
components/ProductCard.module.css
components/ProductCard.tsx
components/ProductList.module.css
components/ProductList.tsx
components/SellerNavBar.module.css
components/SellerNavBar.tsx
components/SortFilterBar.module.css
components/SortFilterBar.tsx
pages/SellerProfilePage.css
pages/SellerProfilePage.tsx
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="components/AccountCard.module.css">
/* src/styles/AccountCard.css */
.card {
  border: 1px solid #ddd;
  padding: 16px;
  max-width: 1200px;
  margin: 0px auto;
  /* box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); */
  background-color: #fff;
  border-radius: 8px;
}

.profile {
  display: flex;
  align-items: center;
  margin-bottom: 16px;
}

.image {
  display: block;
  max-width: 300px;
  width: 100%;
  min-width: 150px;
  aspect-ratio: 1 / 1;
  border-radius: 12px; /* ラウンドがかかった正方形 */
  object-fit: cover;
  margin-right: 16px;
}

.account {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
}

.miniimage {
  display: none;
  width: 80px;
  aspect-ratio: 1 / 1;
  border-radius: 12px; /* ラウンドがかかった正方形 */
  object-fit: cover;
  margin-right: 16px;
}
.info {
  flex: 1;
}
@media (max-width: 1068px) {
  .image {
    display: none; /* 大きいアイコンは隠す */
  }
  .miniimage {
    display: block; /* ミニアイコンを表示 */
  }
}
.name {
  margin: 0;
  font-size: 24px;
  font-weight: bold;
  text-transform: uppercase;
  color: #000000;
}
.followernum {
  margin: 0;
  font-size: 1rem;
}

.allbuttons {
  display: flex;
  flex-wrap: wrap; /* ← 追加：折り返しを有効に */
  justify-content: center;
  margin: 8px; /* shorthand でまとめました */
}

.buttons {
  display: flex;
  margin-top: 8px;
}

.buttons button {
  width: 180px;
  height: 45px;
  margin-right: 8px;
  padding: 8px 16px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  color: #fff;
  display: flex; /* または display: flex; */
  align-items: center; /* 垂直方向の中央揃え */
  justify-content: center; /* 水平方向の中央揃え */
  gap: 0.25rem;
  font-size: 0.9rem;
}

.follow_button {
  background-color: #1da1f2;
}

.present_button {
  background-color: #ff5a5f;
}

.request_button {
  background-color: #ca2ccf;
}

.subscr_button {
  background-color: #28a745;
}

.sns_links {
  margin-top: 8px;
}

.sns_link {
  margin-right: 8px;
  color: #0077cc;
  text-decoration: none;
}

.sns_link:hover {
  text-decoration: underline;
}

.description {
  font-size: 16px;
  line-height: 1.5;
  margin-top: 16px;
  color: #000000;
}
</file>

<file path="components/AccountCard.tsx">
// src/components/AccountCard.tsx
import React from "react";
import styles from "./AccountCard.module.css";
import profileImage from "@root/tests/assets/Icon800x800.png";
import { Icon } from "@root/src/utils/Icon";
import { formatCount } from "@root/src/utils/formatCount";
import DescriptionSection from "@root/src/utils/DescriptionSection";

interface SNSLink {
  name: string;
  url: string;
}

interface AccountCardProps {
  accountName: string;
  description: string;
  snsLinks: SNSLink[];
  followernum: number;
}

const AccountCard: React.FC<AccountCardProps> = ({
  accountName,
  description,
  snsLinks,
  followernum,
}) => {
  return (
    <div className={styles.card}>
      <div className={styles.profile}>
        {/* ① ラウンドがかかった正方形のアイコン画像（ここでは丸く表示しています） */}
        <img src={profileImage} alt="Profile" className={styles.image} />
        <div className={styles.info}>
          {/* ② アカウント名（太字、大文字） */}
          <div className={styles.account}>
            <img
              src={profileImage}
              alt="Profile"
              className={styles.miniimage}
            />
            <div>
              <h1 className={styles.name}>{accountName}</h1>
              <p className={styles.followernum}>
                {formatCount(followernum)}人のフォロワー
              </p>
            </div>
          </div>
          {/* ③～⑤ フォロー、プレゼント、サブスクボタン */}
          <div className={styles.allbuttons}>
            <div className={styles.buttons}>
              <button className={styles.follow_button}>
                <Icon name="suit-heart" />
                フォロー
              </button>
              <button className={styles.present_button}>
                <Icon name="gift-fill" />
                プレゼントを贈る
              </button>
            </div>
            <div className={styles.buttons}>
              <button className={styles.request_button}>
                <Icon name="envelope-heart-fill" />
                リクエストを送る
              </button>
              <button className={styles.subscr_button}>サブスク</button>
            </div>
          </div>
          {/* ⑥ SNSリンク */}
          <div className={styles.sns_links}>
            {snsLinks.map((link, index) => (
              <a
                key={index}
                href={link.url}
                target="_blank"
                rel="noopener noreferrer"
                className={styles.sns_link}
              >
                {link.name}
              </a>
            ))}
          </div>
          <DescriptionSection description={description} />
        </div>
      </div>
    </div>
  );
};

export default AccountCard;
</file>

<file path="components/ProductCard.module.css">
.card {
  width: 100%;
  /* border: 1px solid #ddd;
  border-radius: 8px; */
  overflow: hidden;
  /* box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1); */
  background-color: #fff;
  transition: box-shadow 0.2s ease;
}

.card:hover {
  /* box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); */
}

.image {
  width: 100%;
  height: auto;
  display: block;
  object-fit: cover;
  border-radius: 8px;
}

.content {
  padding: 12px;
}

.title {
  font-size: 1rem;
  /* font-weight: 600; */
  margin: 0 0 0 0;
  color: #333;
  /* 2行で切り捨て（WebKit系対応） */
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
}

.price {
  font-size: 0.9rem;
  color: #888;
  margin: 0;
}
</file>

<file path="components/ProductCard.tsx">
// src/features/seller/components/ProductCard.tsx
import React from "react";
import styles from "./ProductCard.module.css";

interface Product {
  id: number;
  title: string;
  imageUrl: string;
  price: number;
}

interface ProductCardProps {
  product: Product;
}

const ProductCard: React.FC<ProductCardProps> = ({ product }) => {
  return (
    <div className={styles.card}>
      <img
        src={product.imageUrl}
        alt={product.title}
        className={styles.image}
        loading="lazy"
      />
      <div className={styles.content}>
        <p className={styles.title}>{product.title}</p>
        <p className={styles.price}>¥{product.price.toLocaleString()}</p>
      </div>
    </div>
  );
};

export default ProductCard;
</file>

<file path="components/ProductList.module.css">
/* .product-list {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 16px;
  padding: 16px;
} */
.container {
  width: 100%;
  box-sizing: border-box;
  padding: 16px;
}
</file>

<file path="components/ProductList.tsx">
// src/features/seller/components/ProductList.tsx
import React from "react";
import Masonry, { ResponsiveMasonry } from "react-responsive-masonry";
import ProductCard from "./ProductCard";
import Icon800x800 from "@root/tests/assets/Icon800x800.png";
import Icon800x1200 from "@root/tests/assets/Icon800x1200.png";
import PC3840x2400 from "@root/tests/assets/pc3840x2400.jpeg";
import styles from "./ProductList.module.css";

interface Product {
  id: number;
  title: string;
  imageUrl: string;
  price: number;
}

const sampleProducts: Product[] = [
  {
    id: 1,
    title:
      "商品1商品1商品1商品1商品1商品1商品1商品1商品1商品1商品1商品1商品1商品1商品1商品1商品1商品1",
    imageUrl: Icon800x1200,
    price: 1200,
  },
  { id: 2, title: "商品2", imageUrl: PC3840x2400, price: 1500 },
  { id: 3, title: "商品3", imageUrl: Icon800x800, price: 1800 },
  { id: 4, title: "商品4", imageUrl: PC3840x2400, price: 2200 },
  { id: 5, title: "商品5", imageUrl: Icon800x1200, price: 1200 },
  { id: 6, title: "商品6", imageUrl: PC3840x2400, price: 1500 },
  { id: 7, title: "商品7", imageUrl: Icon800x800, price: 1800 },
  { id: 8, title: "商品8", imageUrl: Icon800x1200, price: 2200 },
  { id: 9, title: "商品9", imageUrl: Icon800x1200, price: 2200 },
  { id: 10, title: "商品10", imageUrl: PC3840x2400, price: 1200 },
  { id: 11, title: "商品11", imageUrl: Icon800x1200, price: 1500 },
  { id: 12, title: "商品12", imageUrl: Icon800x800, price: 1800 },
  { id: 13, title: "商品13", imageUrl: Icon800x1200, price: 2200 },
  { id: 14, title: "商品4", imageUrl: PC3840x2400, price: 2200 },
  { id: 15, title: "商品5", imageUrl: Icon800x800, price: 1200 },
  { id: 16, title: "商品6", imageUrl: Icon800x1200, price: 1500 },
  { id: 17, title: "商品7", imageUrl: Icon800x1200, price: 1800 },
  { id: 18, title: "商品8", imageUrl: PC3840x2400, price: 2200 },
  { id: 19, title: "商品9", imageUrl: Icon800x1200, price: 2200 },
  { id: 20, title: "商品10", imageUrl: PC3840x2400, price: 1200 },
  { id: 21, title: "商品11", imageUrl: Icon800x1200, price: 1500 },
  { id: 22, title: "商品12", imageUrl: PC3840x2400, price: 1800 },
  { id: 23, title: "商品13", imageUrl: Icon800x1200, price: 2200 },
  // さらに多くの商品データ...
];

const ProductList: React.FC = () => {
  return (
    <div className={styles.container}>
      <ResponsiveMasonry
        columnsCountBreakPoints={{
          350: 2,
          768: 3,
          1024: 4,
          1280: 5,
          1580: 6,
          1780: 7,
          2080: 8,
        }}
      >
        <Masonry gutter="16px" sequential={false}>
          {sampleProducts.map((product) => (
            <ProductCard key={product.id} product={product} />
          ))}
        </Masonry>
      </ResponsiveMasonry>
    </div>
  );
};

export default ProductList;
</file>

<file path="components/SellerNavBar.module.css">
.nav {
  display: flex;
  gap: 6px;
  margin: 4px auto;
  background-color: transparent;
  padding: 8px;
  font-size: 1.2rem;
  max-width: 700px;
}

.button {
  /* width: 200px; */
  flex: 1; /* ← 各ボタンを等分割 */
  min-width: 0; /* ← テキスト長で勝手に広がらないよう */
  text-align: center; /* ← 中央揃え */
  background: transparent;
  border: none;
  padding: 8px 16px;
  cursor: pointer;
  font-weight: normal;
  position: relative;
  color: rgb(175, 175, 175);
  font-size: 1rem;
  transition: color 0.3s;
}

.button::after {
  content: "";
  position: absolute;
  left: 0;
  bottom: 0;
  height: 2px;
  width: 100%;
  background-color: transparent;
  /* transition: background-color 0.3s; */
}
.button.active {
  font-weight: bold;
  color: #363636; /* アクティブ時の文字色を黒に設定 */
}
.button.active::after {
  background-color: rgb(54, 54, 54); /* アクティブなアンダーラインの色 */
}

.button:hover::after {
  background-color: rgba(
    54,
    54,
    54,
    0.2
  ); /* ホバー時のアンダーライン（50%透過） */
}
</file>

<file path="components/SellerNavBar.tsx">
import React from "react";
import styles from "./SellerNavBar.module.css";

interface SellerNavBarProps {
  activeTab: "home" | "store" | "collection" | "market";
  onTabChange: (tab: "home" | "store" | "collection" | "market") => void;
}

const SellerNavBar: React.FC<SellerNavBarProps> = ({
  activeTab,
  onTabChange,
}) => {
  return (
    <nav className={styles.nav}>
      {["ホーム", "一覧", "コレクション", "マーケット"].map((tab) => (
        <button
          key={tab}
          onClick={() =>
            onTabChange(tab as "home" | "store" | "collection" | "market")
          }
          className={`${styles.button} ${activeTab === tab ? styles.active : ""}`}
        >
          {tab.toUpperCase()}
        </button>
      ))}
    </nav>
  );
};

export default SellerNavBar;
</file>

<file path="components/SortFilterBar.module.css">
.bar {
  display: flex;
  gap: 12px;
  padding: 4px;
  justify-content: flex-start; /* 左寄せに変更 */
  position: relative;
  margin: 0 16px;
}

.bar button {
  color: rgb(255, 255, 255);
  padding: 4px 16px;
  background-color: #000000;
  cursor: pointer;
  border-radius: 24px;
  font-weight: bold;
  border: none;
  /* font-size: 0.9rem; */
}

.dropdown {
  position: absolute;
  top: 60px;
  color: rgba(0, 0, 0, 1);
  background-color: white;
  border: none;
  z-index: 1000;
  border-radius: 6px;
  padding: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
}

.dropdown > div {
  padding: 6px 12px;
  cursor: pointer;
}

.dropdown > div:hover {
  background-color: #f0f0f0;
}

.overlay {
  position: fixed;
  inset: 0;
  background-color: rgba(0, 0, 0, 0.3);
  z-index: 500;
}
</file>

<file path="components/SortFilterBar.tsx">
import React, { useState, useRef } from "react";
import styles from "./SortFilterBar.module.css";

const sortOptions = ["人気順", "新しい順", "古い順", "安い順", "高い順"];
const filterOptions = [
  "すべて",
  "画像",
  "3Dモデル",
  "フォント",
  "PC壁紙",
  "スマホ壁紙",
  "テンプレート",
];

const SortFilterBar: React.FC = () => {
  const [sortValue, setSortValue] = useState("新しい順");
  const [filterValue, setFilterValue] = useState("すべて");
  const [openType, setOpenType] = useState<"sort" | "filter" | null>(null);
  const [dropdownStyle, setDropdownStyle] = useState<React.CSSProperties>({});

  const sortButtonRef = useRef<HTMLButtonElement>(null);
  const filterButtonRef = useRef<HTMLButtonElement>(null);

  const handleSelect = (type: "sort" | "filter", value: string) => {
    type === "sort" ? setSortValue(value) : setFilterValue(value);
    setOpenType(null);
  };

  const toggleDropdown = (type: "sort" | "filter") => {
    if (openType === type) {
      setOpenType(null);
    } else {
      const buttonRef = type === "sort" ? sortButtonRef : filterButtonRef;
      if (buttonRef.current) {
        const rect = buttonRef.current.getBoundingClientRect();
        const offsetParentRect =
          buttonRef.current.offsetParent?.getBoundingClientRect();
        setDropdownStyle({
          position: "absolute",
          top: rect.bottom + 5 - (offsetParentRect?.top || 0),
          left: rect.left - (offsetParentRect?.left || 0),
        });
      }
      setOpenType(type);
    }
  };

  return (
    <>
      {openType && (
        <div className={styles.overlay} onClick={() => setOpenType(null)} />
      )}
      <div className={styles.bar}>
        <button ref={sortButtonRef} onClick={() => toggleDropdown("sort")}>
          {sortValue}
        </button>
        <button ref={filterButtonRef} onClick={() => toggleDropdown("filter")}>
          {filterValue}
        </button>

        {openType === "sort" && (
          <div className={styles.dropdown} style={dropdownStyle}>
            {sortOptions.map((option) => (
              <div key={option} onClick={() => handleSelect("sort", option)}>
                {option}
              </div>
            ))}
          </div>
        )}

        {openType === "filter" && (
          <div className={styles.dropdown} style={dropdownStyle}>
            {filterOptions.map((option) => (
              <div key={option} onClick={() => handleSelect("filter", option)}>
                {option}
              </div>
            ))}
          </div>
        )}
      </div>
    </>
  );
};

export default SortFilterBar;
</file>

<file path="pages/SellerProfilePage.css">
.seller-profile {
  display: block;
  width: 100%;
  box-sizing: border-box;
}
</file>

<file path="pages/SellerProfilePage.tsx">
import React, { useState } from "react";
import AccountCard from "../components/AccountCard";
import SellerNavBar from "../components/SellerNavBar";
import ProductList from "../components/ProductList";
import SortFilterBar from "../components/SortFilterBar";

const SellerProfilePage: React.FC = () => {
  const [activeTab, setActiveTab] = useState<
    "home" | "store" | "collection" | "market"
  >("home");

  const handleTabChange = (tab: "home" | "store" | "collection" | "market") => {
    setActiveTab(tab);
  };

  const snsLinks = [
    { name: "Twitter", url: "https://twitter.com/youraccount" },
    { name: "Instagram", url: "https://instagram.com/youraccount" },
    { name: "Facebook", url: "https://facebook.com/youraccount" },
  ];

  return (
    <div className="seller-profile">
      <AccountCard
        accountName="SALE SELLER"
        description={`
        こんにちは！  
        このアカウントでは以下の情報を発信しています。
        公式サイト: https://example.com
        `}
        snsLinks={snsLinks}
        followernum={24230}
      />
      <SellerNavBar activeTab={activeTab} onTabChange={handleTabChange} />
      <SortFilterBar />
      <ProductList />
    </div>
  );
};

export default SellerProfilePage;
</file>

</files>
