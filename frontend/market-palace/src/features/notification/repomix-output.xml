This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
components/NotificationCard.module.css
components/NotificationCard.tsx
components/NotificationList.module.css
components/NotificationList.tsx
components/NotificationNav.tsx
pages/NotificationPage.tsx
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="components/NotificationCard.module.css">
.card {
  display: grid;
  /* 画像:64px 固定, 説明文:縮められる可変幅, 日付:内容幅 */
  grid-template-columns: 8rem minmax(0, 1fr) auto;
  align-items: center;
  padding: 12px 16px;
  border-bottom: 1px solid #e0e0e0;
  gap: 16px;
  width: 100%;
}

.imageContainer {
  width: 8rem;
  height: 8rem;
  overflow: hidden;
  border-radius: 8px;
}

.image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.description {
  font-size: 0.875rem;
  color: #333;
  margin: 0;

  /* 最大6行まで表示し、それ以降は省略 */
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 4;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: normal;

  /* 幅縮小時のオーバーフロー防止 */
  min-width: 0;
  word-break: break-word;
}

.date {
  font-size: 14px;
  color: #777;
  margin: 0;
  /* 日付も縮めたい場合は追加 */
  white-space: nowrap;
}
</file>

<file path="components/NotificationCard.tsx">
// src/components/NotificationCard.tsx
import React from "react";
import { formatDistanceToNow } from "date-fns";
import ja from "date-fns/locale/ja";
import styles from "./NotificationCard.module.css";

interface NotificationCardProps {
  imageUrl: string;
  description: string;
  date: Date;
}

const NotificationCard: React.FC<NotificationCardProps> = ({
  imageUrl,
  description,
  date,
}) => {
  const relativeTime = formatDistanceToNow(date, {
    addSuffix: true,
    locale: ja,
  });

  return (
    <div className={styles.card}>
      <div className={styles.imageContainer}>
        <img
          src={imageUrl}
          alt={description}
          className={styles.image}
          loading="lazy"
        />
      </div>
      <p className={styles.description}>{description}</p>
      <p className={styles.date}>{relativeTime}</p>
    </div>
  );
};

export default NotificationCard;
</file>

<file path="components/NotificationList.module.css">
.container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 0 auto;
  max-width: 800px;
  min-width: 0px;
  width: 100%;
  justify-content: center;
}
</file>

<file path="components/NotificationList.tsx">
// src/components/NotificationList.tsx
import React, { useState } from "react";
import NotificationCard from "./NotificationCard";
import NotificationNav from "./NotificationNav";

import styles from "./NotificationList.module.css";

import Icon800x800 from "@root/tests/assets/Icon800x800.png";
import Icon800x1200 from "@root/tests/assets/Icon800x1200.png";
import PC3840x2400 from "@root/tests/assets/pc3840x2400.jpeg";

interface NotificationData {
  id: number;
  imageUrl: string;
  description: string;
  date: Date;
}

const sampleNotifications: NotificationData[] = [
  {
    id: 1,
    imageUrl: Icon800x800,
    description:
      "新しいコメントが投稿されました。新しいコメントが投稿されました新しいコメントが投稿されました新しいコメントが投稿されました新しいコメントが投稿されました",
    date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3日前
  },
  {
    id: 2,
    imageUrl: Icon800x1200,
    description:
      "新しいコメントが投稿されました。新しいコメントが投稿されました新しいコメントが投稿されました新しいコメントが投稿されました新しいコメントが投稿されました",
    date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 1週間前
  },
  {
    id: 3,
    imageUrl: PC3840x2400,
    description:
      "新しいコメントが投稿されました。新しいコメントが投稿されました新しいコメントが投稿されました新しいコメントが投稿されました新しいコメントが投稿されました",
    date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 1か月前
  },
  {
    id: 4,
    imageUrl: Icon800x800,
    description:
      "新しいコメントが投稿されました。新しいコメントが投稿されました新しいコメントが投稿されました新しいコメントが投稿されました新しいコメントが投稿されました",
    date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3日前
  },
  {
    id: 5,
    imageUrl: Icon800x1200,
    description: "週次レポートが利用可能です。",
    date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 1週間前
  },
  {
    id: 6,
    imageUrl: PC3840x2400,
    description: "メンテナンスのお知らせ。",
    date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 1か月前
  },
  {
    id: 7,
    imageUrl: Icon800x800,
    description:
      "新しいコメントが投稿されました。新しいコメントが投稿されました新しいコメントが投稿されました新しいコメントが投稿されました新しいコメントが投稿されました",
    date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3日前
  },
  {
    id: 8,
    imageUrl: Icon800x1200,
    description: "週次レポートが利用可能です。",
    date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 1週間前
  },
  {
    id: 9,
    imageUrl: PC3840x2400,
    description: "メンテナンスのお知らせ。",
    date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 1か月前
  },
  {
    id: 10,
    imageUrl: Icon800x800,
    description:
      "新しいコメントが投稿されました。新しいコメントが投稿されました新しいコメントが投稿されました新しいコメントが投稿されました新しいコメントが投稿されました",
    date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3日前
  },
  {
    id: 11,
    imageUrl: Icon800x1200,
    description: "週次レポートが利用可能です。",
    date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 1週間前
  },
  {
    id: 12,
    imageUrl: PC3840x2400,
    description: "メンテナンスのお知らせ。",
    date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 1か月前
  },
];

type TabKey =
  | "orders"
  | "messages"
  | "activity"
  | "system"
  | "promo"
  | "recommend";

const NotificationList: React.FC = () => {
  const [activeTab, setActiveTab] = useState<TabKey>("orders");

  const handleTabChange = (tab: TabKey) => {
    setActiveTab(tab);
  };

  return (
    <div className={styles.container}>
      <NotificationNav activeTab={activeTab} onTabChange={handleTabChange} />

      {sampleNotifications.map(({ id, imageUrl, description, date }) => (
        <NotificationCard
          key={id}
          imageUrl={imageUrl}
          description={description}
          date={date}
        />
      ))}
    </div>
  );
};

export default NotificationList;
</file>

<file path="components/NotificationNav.tsx">
import React from "react";
import { TabNav, TabItem } from "../../../components/TabNav";

type NotificationTabKey =
  | "orders"
  | "messages"
  | "activity"
  | "system"
  | "promo"
  | "recommend";

const NOTIFICATION_TABS: TabItem<NotificationTabKey>[] = [
  { key: "orders", label: "取引" },
  { key: "messages", label: "メッセージ" },
  { key: "activity", label: "フォロー" },
  { key: "system", label: "システム" },
  { key: "promo", label: "宣伝" },
  { key: "recommend", label: "おすすめ" },
];

interface NotificationNavBarProps {
  activeTab: NotificationTabKey;
  onTabChange: (tab: NotificationTabKey) => void;
}

const NotificationNav: React.FC<NotificationNavBarProps> = ({
  activeTab,
  onTabChange,
}) => {
  return (
    <TabNav
      tabs={NOTIFICATION_TABS}
      activeTab={activeTab}
      onTabChange={onTabChange}
    />
  );
};

export default NotificationNav;
</file>

<file path="pages/NotificationPage.tsx">
// pages/SellerProfilePage.tsx
import React, { useState, useEffect } from "react";

import NotificationList from "../components/NotificationList";
// タブごとのダミー表示コンポーネント

const NotificationPage: React.FC = () => {
  return (
    <div className="seller-profile">
      <NotificationList />
    </div>
  );
};

export default NotificationPage;
</file>

</files>
