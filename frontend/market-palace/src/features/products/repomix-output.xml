This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
api/productAPI.ts
components/ActionButtons.module.css
components/ActionButtons.tsx
components/CreatorsSection.module.css
components/CreatorsSection.tsx
components/DescriptionSection.module.css
components/DescriptionSection.tsx
components/DetailSection.module.css
components/DetailSection.tsx
components/FormatSection.module.css
components/FormatSection.tsx
components/Modal.module.css
components/Modal.tsx
components/ProductCard.tsx
components/ProductDetailCard.module.css
components/ProductDetailCard.tsx
components/ProductGallery.module.css
components/ProductGallery.tsx
components/PurchaseSection.module.css
components/PurchaseSection.tsx
components/SellersSection.module.css
components/SellersSection.tsx
components/Tags.module.css
components/Tags.tsx
components/VersionSection.module.css
components/VersionSection.tsx
hooks/useMediaQuery.ts
pages/ProductPage.tsx
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="api/productAPI.ts">
// src/features/product/api/productAPI.ts
// export async function fetchProducts() {
//   const response = await fetch("http://localhost:8001/api/products/");
//   return await response.json();
// }

// frontend/market-palace/src/features/products/api/productAPI.ts
const BASE = import.meta.env.VITE_API_BASE_URL || "http://localhost:8001/api";

export async function fetchProductById(productId: string) {
  const res = await fetch(`${BASE}/products/${productId}/`);
  if (!res.ok) {
    throw new Error(`Failed to fetch product ${productId}: ${res.status}`);
  }
  return res.json();
}
</file>

<file path="components/ActionButtons.module.css">
.buttons {
  display: flex;
  gap: 12px;
  justify-content: center;
  margin: 0 auto;
}

.button {
  width: 90px;
  height: 50px;
  padding: 8px 16px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 1rem;
  display: flex; /* または display: flex; */
  align-items: center; /* 垂直方向の中央揃え */
  justify-content: center; /* 水平方向の中央揃え */
  gap: 0.5rem;
  /* box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1); */
  background-color: transparent;
  color: #000;
}

.button:hover {
  background-color: rgba(0, 0, 0, 0.05);
}

/* .icon {
  width: 25px;
  height: 25px;
  margin-right: 4px;
  margin-left: 4px;
  vertical-align: middle;
} */
</file>

<file path="components/ActionButtons.tsx">
import React from "react";
import styles from "./ActionButtons.module.css";
import { Icon } from "@root/src/utils/Icon";
// import CartIcon from "./react.svg?react";

interface ActionButtonsProps {
  actions: {
    likes: number;
    favorites: number;
    comments: number;
  };
}

const ActionButtons: React.FC<ActionButtonsProps> = ({ actions }) => {
  return (
    <footer className={styles.buttons}>
      <button className={styles.button}>
        <Icon name="suit-heart" size={28} />
        {actions.likes}
      </button>
      <button className={styles.button}>
        <Icon name="bookmark-star" size={28} />
        {actions.favorites}
      </button>
      <button className={styles.button}>
        <Icon name="comment" size={28} />
        {actions.comments}
      </button>
      <button className={styles.button}>
        <Icon name="share" size={28} />
      </button>
      <button className={styles.button}>
        <Icon name="bell" size={28} />
      </button>
    </footer>
  );
};

export default ActionButtons;
</file>

<file path="components/CreatorsSection.module.css">
.list {
  display: flex;
  gap: 4px;
  align-items: center;
}

.badge {
  display: inline-flex;
  align-items: center;
  background: transparent;
  padding: 2px 2px;
  border-radius: 1px;
  font-size: 0.875rem;
  gap: 4px;
}

.icon {
  width: 40px;
  height: 40px;
  object-fit: cover;
  border-radius: 50%;
}

.text {
  display: inline-block;
  max-width: 80px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.modal_list {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.modal_item {
  display: flex;
  gap: 8px;
  align-items: center;
}

.modal_item .text {
  max-width: 200px;
}
.more_button {
  width: 40px;
  height: 40px;
  border: none;
  font-size: 0.5rem;
  background: #363636;
  /* padding: 12px; */
  border-radius: 50%;
}
</file>

<file path="components/CreatorsSection.tsx">
import React, { useState } from "react";
import styles from "./CreatorsSection.module.css";
import Modal from "./Modal";
import Icon800x800 from "@root/tests/assets/Icon800x800.png";
import { Icon } from "@root/src/utils/Icon";
interface CreatorProps {
  creators: {
    id: number;
    username: string;
  }[];
}

const CreatorsSection: React.FC<CreatorProps> = ({ creators }) => {
  const [showCreatorsModal, setShowCreatorsModal] = useState(false);
  if (!creators || creators.length === 0) {
    return null;
  }

  return (
    <div className={styles.section}>
      <div className={styles.list}>
        {/* <strong>作成者</strong> */}
        {creators.slice(0, 8).map((c) => (
          <span key={c.id} className={styles.badge}>
            <img src={Icon800x800} alt="Icon" className={styles.icon} />
            {/* <span className="creators-section__text" title={c.username}>
              {c.username}
            </span> */}
          </span>
        ))}
        <button
          className={styles.more_button}
          onClick={() => setShowCreatorsModal(true)}
        >
          <Icon name="three-dots" fill="#fff" />
        </button>
      </div>

      {showCreatorsModal && (
        <Modal onClose={() => setShowCreatorsModal(false)}>
          <h3>作成者一覧</h3>
          <ul className={styles.modal_list}>
            {creators.map((c) => (
              <li key={c.id} className={styles.modal_item}>
                <img src={Icon800x800} alt="Icon" className={styles.icon} />
                <span className={styles.text}>{c.username}</span>
              </li>
            ))}
          </ul>
        </Modal>
      )}
    </div>
  );
};

export default CreatorsSection;
</file>

<file path="components/DescriptionSection.module.css">
.section {
  position: relative;
  background: #f5f5f5;
  padding: 12px;
  border-radius: 8px;
}

.text {
  line-height: 1.6;
  transition: max-height 0.3s ease;
}

.text--collapsed {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.text--expanded {
  max-height: none;
}

.toggle_button {
  background: none;
  border: none;
  color: #007bff;
  cursor: pointer;
  padding: 4px 0;
  font-size: 0.875rem;
}

.toggle_button:hover {
  text-decoration: underline;
}
</file>

<file path="components/DescriptionSection.tsx">
import React, { useState } from "react";
import styles from "./DescriptionSection.module.css";

interface DescriptionProps {
  description: string;
}

const DescriptionSection: React.FC<DescriptionProps> = ({ description }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const toggleDescription = () => setIsExpanded((prev) => !prev);

  if (!description || description.length === 0) {
    return null;
  }

  return (
    <section className={styles.section}>
      <p
        className={`${styles.text} ${
          isExpanded ? styles["text--expanded"] : styles["text--collapsed"]
        }`}
      >
        {description}
      </p>
      <button className={styles.toggle_button} onClick={toggleDescription}>
        {isExpanded ? "一部を表示" : "すべて表示"}
      </button>
    </section>
  );
};

export default DescriptionSection;
</file>

<file path="components/DetailSection.module.css">
.section {
  width: 100%;
  max-width: 300px;
  margin: 0 auto;
  padding: 12px;
  background-color: #f5f5f5;
  border-radius: 8px;
  /* box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); */
}

.title {
  font-size: 1.1rem;
  margin-bottom: 12px;
  font-weight: bold;
}

.table {
  display: flex;
  flex-direction: column;
  gap: 12px;
  margin-top: 20px;
  background-color: #ffffff;
  border-radius: 8px;
}

.row {
  display: flex;
  justify-content: space-between;
  padding: 8px 12px;
  border-radius: 4px;
  font-size: 0.9rem;
}

.label {
  font-weight: bold;
  color: #333;
}

.value {
  color: #555;
}
</file>

<file path="components/DetailSection.tsx">
import React from "react";
import styles from "./DetailSection.module.css";

interface DetailProps {
  detail: { rating: string; allowAI: boolean; isAIGenerated: boolean };
}

const DetailSection: React.FC<DetailProps> = ({ detail }) => {
  return (
    <div className={styles.section}>
      <h2 className={styles.title}>詳細</h2>
      <div className={styles.table}>
        <div className={styles.row}>
          <span className={styles.label}>レーティング</span>
          <span className={styles.value}>{detail.rating}</span>
        </div>
        <div className={styles.row}>
          <span className={styles.label}>AI利用</span>
          <span className={styles.value}>
            {detail.allowAI ? "許可" : "禁止"}
          </span>
        </div>
        <div className={styles.row}>
          <span className={styles.label}>AI生成</span>
          <span className={styles.value}>
            {detail.isAIGenerated ? "はい" : "いいえ"}
          </span>
        </div>
      </div>
    </div>
  );
};

export default DetailSection;
</file>

<file path="components/FormatSection.module.css">
.section {
  background: #f5f5f5;
  padding: 12px;
  border-radius: 8px;
}

.title {
  margin-bottom: 8px;
  font-size: 1rem;
  font-weight: bold;
}

.buttons {
  display: flex;
  gap: 8px;
  margin-bottom: 12px;
}

.button {
  padding: 6px 12px;
  border: 1px solid #ccc;
  border-radius: 4px;
  background: white;
  cursor: pointer;
  font-size: 0.875rem;
}

.button--active {
  background: #363636;
  color: rgb(255, 255, 255);
  border-color: #363636;
}

.detail ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.detail li {
  margin-bottom: 4px;
}
</file>

<file path="components/FormatSection.tsx">
import React, { useState } from "react";
import styles from "./FormatSection.module.css";

type FormatInfo = {
  format: string;
  info: Record<string, any>;
};

interface FormatProps {
  formats: FormatInfo[];
}

const FormatSection: React.FC<FormatProps> = ({ formats }) => {
  const [selectedFormat, setSelectedFormat] = useState(0);

  if (!formats || formats.length === 0) {
    return null;
  }

  return (
    <section className={styles.section}>
      <h2 className={styles.title}>フォーマット</h2>
      <div className={styles.buttons}>
        {formats.map((f, i) => (
          <button
            key={i}
            className={`${styles.button} ${
              selectedFormat === i ? styles["button--active"] : ""
            }`}
            onClick={() => setSelectedFormat(i)}
          >
            {f.format}
          </button>
        ))}
      </div>
      <div className={styles.detail}>
        <ul>
          {Object.entries(formats[selectedFormat].info).map(([key, val]) => (
            <li key={key}>
              <strong>{key}:</strong> {val}
            </li>
          ))}
        </ul>
      </div>
    </section>
  );
};

export default FormatSection;
export type { FormatInfo };
</file>

<file path="components/Modal.module.css">
.modal {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.4);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.window {
  position: relative;
  background: #fff;
  border-radius: 8px;
  padding: 16px;
  width: fit-content;
  min-width: 320px;
  max-width: 75%;
  max-height: calc(100vh - 80px);
  overflow-y: auto;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
}

.close_button {
  position: absolute;
  top: 12px;
  right: 12px;
  background: transparent;
  border: none;
  font-size: 2rem;
  line-height: 1;
  cursor: pointer;
  color: #d6d6d6;
}

.close_button:hover {
  color: #727272;
}
</file>

<file path="components/Modal.tsx">
import React, { ReactNode, useEffect, useRef } from "react";
import styles from "./modal.module.css";

type ModalProps = {
  children: ReactNode;
  onClose: () => void;
};

const Modal: React.FC<ModalProps> = ({ children, onClose }) => {
  const overlayRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      if (
        overlayRef.current &&
        e.target instanceof Node &&
        !overlayRef.current.contains(e.target)
      ) {
        onClose();
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, [onClose]);

  return (
    <div className={styles.modal}>
      <div className={styles.window} ref={overlayRef}>
        <button className={styles.close_button} onClick={onClose}>
          &times;
        </button>
        {children}
      </div>
    </div>
  );
};

export default Modal;
</file>

<file path="components/ProductCard.tsx">
type Product = {
  id: number;
  title: string;
  description: string;
  price: string;
};

export default function ProductCard({ product }: { product: Product }) {
  return (
    <div className="border p-4 rounded">
      <h2>{product.title}</h2>
      <p>{product.description}</p>
      <strong>¥{product.price}</strong>
      <button className="mt-2 bg-blue-500 text-white px-3 py-1 rounded">
        購入
      </button>
    </div>
  );
}
</file>

<file path="components/ProductDetailCard.module.css">
.card {
  max-width: 1400px;
  margin: 0 auto;
  padding: 24px;
  display: grid;
  grid-template-columns: minmax(500px, 1fr) minmax(500px, 550px);
  gap: 32px;
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  position: relative;
}

@media (max-width: 1228px) {
  .card {
    display: flex;
    flex-direction: column;
    max-width: 768px;
    /* min-width: 468px; */
  }
}

.media {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.info {
  position: relative;
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.extra_info {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.title {
  font-size: 1.75rem;
  margin-top: 6px;
  margin-bottom: 6px;
}

.report {
  position: absolute;
  bottom: 10px; /* お好みのマージンに調整 */
  right: 10px; /* お好みのマージンに調整 */

  background: #f0f0f0;
  color: #555;
  border: none;
  font-size: 0.9rem;
  padding: 6px 12px;
  border-radius: 6px;
}

.help_buttons {
  text-align: right;
}

.more_btn {
  background: #f0f0f0;
  border: none;
  font-size: 1.5rem;
  padding: 4px;
  border-radius: 50%;
  width: 40px;
  height: 40px;
}

.vertical_list {
  display: flex;
  flex-direction: column;
  gap: 12px;
}
</file>

<file path="components/ProductDetailCard.tsx">
/* ProductDetailCard.tsx */
import React from "react";
import styles from "./ProductDetailCard.module.css";
import GalleryImages from "./ProductGallery";
import DescriptionSection from "./DescriptionSection";
import FormatSection, { FormatInfo } from "./FormatSection";
import Tags from "./Tags";
import SellersSection from "./SellersSection";
import CreatorsSection from "./CreatorsSection";
import ActionButtons from "./ActionButtons";
import PurchaseSection, { LicenseEntry } from "./PurchaseSection";
import VersionSection from "./VersionSection";
import DetailSection from "./DetailSection";
import { useMediaQuery } from "../hooks/useMediaQuery";

import Icon800x800 from "@root/tests/assets/Icon800x800.png";
import Icon800x1200 from "@root/tests/assets/Icon800x1200.png";
import PC3840x2400 from "@root/tests/assets/pc3840x2400.jpeg";
import Banner600x200 from "@root/tests/assets/Icon600x200.jpg";

type Product = {
  id: string;
  title: string;
  description: string;
  thumbnail_url: string;
  images: string[];
  creators: { id: number; username: string }[];
  tags: string[];
  rating: string;
  allow_ai_use: boolean;
  is_ai_generated: boolean;
  formats: FormatInfo[];
  licenses: LicenseEntry[];
  release_date: string;
  updated_at: string;
  view_count: number;
};

interface Props {
  product: Product;
}

// ダミーデータ
const dummyProduct = {
  title: "サンプル商品タイトル",
  sellers: [
    {
      id: 1,
      name: "Shop A 長い名前テスト用1234567890",
      url: "#",
      image: Banner600x200,
    },
    { id: 2, name: "Shop B", url: "#", image: Banner600x200 },
    {
      id: 3,
      name: "非常に長い販売所名をここに入れて切り捨てをテストします",
      url: "#",
      image: Banner600x200,
    },
    {
      id: 4,
      name: "非常に長い販売所名をここに入れて切り捨てをテストします",
      url: "#",
      image: Banner600x200,
    },
    {
      id: 5,
      name: "非常に長い販売所名をここに入れて切り捨てをテストします",
      url: "#",
      image: Banner600x200,
    },
    {
      id: 6,
      name: "非常に長い販売所名をここに入れて切り捨てをテストします",
      url: "#",
      image: Banner600x200,
    },
    {
      id: 7,
      name: "非常に長い販売所名をここに入れて切り捨てをテストします非常に長い販売所名をここに入れて切り捨てをテストします",
      url: "#",
      image: Banner600x200,
    },
    {
      id: 4,
      name: "非常に長い販売所名をここに入れて切り捨てをテストします",
      url: "#",
      image: Banner600x200,
    },
    {
      id: 5,
      name: "非常に長い販売所名をここに入れて切り捨てをテストします",
      url: "#",
      image: Banner600x200,
    },
    {
      id: 6,
      name: "非常に長い販売所名をここに入れて切り捨てをテストします",
      url: "#",
      image: Banner600x200,
    },
    {
      id: 7,
      name: "非常に長い販売所名をここに入れて切り捨てをテストします非常に長い販売所名をここに入れて切り捨てをテストします",
      url: "#",
      image: Banner600x200,
    },
    {
      id: 8,
      name: "非常に長い販売所名をここに入れて切り捨てをテストします",
      url: "#",
      image: Banner600x200,
    },
    {
      id: 9,
      name: "非常に長い販売所名をここに入れて切り捨てをテストします",
      url: "#",
      image: Banner600x200,
    },
    {
      id: 10,
      name: "非常に長い販売所名をここに入れて切り捨てをテストします",
      url: "#",
      image: Banner600x200,
    },
    {
      id: 11,
      name: "非常に長い販売所名をここに入れて切り捨てをテストします非常に長い販売所名をここに入れて切り捨てをテストします",
      url: "#",
      image: Banner600x200,
    },
  ],
  creators: [
    { id: 1, username: "creator_one_long_name_test_123456" },
    { id: 2, username: "creator_two" },
    { id: 3, username: "creator_two" },
    { id: 4, username: "creator_two" },
    { id: 5, username: "creator_two" },
    { id: 6, username: "creator_two" },
    { id: 7, username: "creator_two" },
    { id: 8, username: "creator_two" },
    { id: 9, username: "creator_two" },
    { id: 10, username: "creator_two" },
    { id: 11, username: "creator_two" },
  ],
  description: `これは商品の説明文です。商品の魅力や特徴を簡潔に紹介します。
さらに詳細な情報を含めることで、ユーザーに商品の価値を伝えます。
長い説明文が続く場合は、折りたたみ機能を実装して見やすさを保ちます。
これにより、UIがすっきりし、必要に応じて全文を確認できます。これは商品の説明文です。商品の魅力や特徴を簡潔に紹介します。
さらに詳細な情報を含めることで、ユーザーに商品の価値を伝えます。
長い説明文が続く場合は、折りたたみ機能を実装して見やすさを保ちます。
これにより、UIがすっきりし、必要に応じて全文を確認できます。これは商品の説明文です。商品の魅力や特徴を簡潔に紹介します。
さらに詳細な情報を含めることで、ユーザーに商品の価値を伝えます。
長い説明文が続く場合は、折りたたみ機能を実装して見やすさを保ちます。
これにより、UIがすっきりし、必要に応じて全文を確認できます。これは商品の説明文です。商品の魅力や特徴を簡潔に紹介します。
さらに詳細な情報を含めることで、ユーザーに商品の価値を伝えます。
長い説明文が続く場合は、折りたたみ機能を実装して見やすさを保ちます。
これにより、UIがすっきりし、必要に応じて全文を確認できます。これは商品の説明文です。商品の魅力や特徴を簡潔に紹介します。
さらに詳細な情報を含めることで、ユーザーに商品の価値を伝えます。
長い説明文が続く場合は、折りたたみ機能を実装して見やすさを保ちます。
これにより、UIがすっきりし、必要に応じて全文を確認できます。これは商品の説明文です。商品の魅力や特徴を簡潔に紹介します。
さらに詳細な情報を含めることで、ユーザーに商品の価値を伝えます。
長い説明文が続く場合は、折りたたみ機能を実装して見やすさを保ちます。
これにより、UIがすっきりし、必要に応じて全文を確認できます。これは商品の説明文です。商品の魅力や特徴を簡潔に紹介します。
さらに詳細な情報を含めることで、ユーザーに商品の価値を伝えます。
長い説明文が続く場合は、折りたたみ機能を実装して見やすさを保ちます。
これにより、UIがすっきりし、必要に応じて全文を確認できます。これは商品の説明文です。商品の魅力や特徴を簡潔に紹介します。
さらに詳細な情報を含めることで、ユーザーに商品の価値を伝えます。
長い説明文が続く場合は、折りたたみ機能を実装して見やすさを保ちます。
これにより、UIがすっきりし、必要に応じて全文を確認できます。`, // 4行以上の例
  tags: ["UI", "React", "TypeScript"],

  detail: {
    rating: "全年齢",
    allowAI: true,
    isAIGenerated: false,
  },
  formats: [
    {
      format: "PNG",
      info: {
        幅: "800px",
        高さ: "800px",
        容量: "200KB",
        アスペクト比: "1:1",
      },
    },
    {
      format: "JPEG",
      info: {
        幅: "3840px",
        高さ: "2400px",
        容量: "2MB",
        アスペクト比: "16:10",
      },
    },
  ],
  licenses: [
    { id: 1, name: "個人", price: 1000 },
    { id: 2, name: "商用", price: 5000 },
  ],

  actions: {
    likes: 120,
    favorites: 45,
    comments: 8,
  },

  versions: [
    {
      name: "v1.0",
      releaseDate: "2025-01-01",
      updatedAt: "2025-01-10",
      status: "公開",
    },
    {
      name: "v1.1",
      releaseDate: "2025-02-15",
      updatedAt: "2025-02-20",
      status: "非公開",
    },
    {
      name: "v2.0",
      releaseDate: "2025-03-01",
      updatedAt: "2025-03-15",
      status: "公開",
    },
  ],
};

const ProductDetailCard: React.FC = () => {
  const isMobile = useMediaQuery("(max-width: 1228px)");
  const product = dummyProduct;

  const galleryImages = [
    Icon800x1200,
    PC3840x2400,
    PC3840x2400,
    Icon800x800,
    PC3840x2400,
    PC3840x2400,
    Icon800x800,
    PC3840x2400,
    PC3840x2400,
    Icon800x800,
    Icon800x1200,
    PC3840x2400,
    PC3840x2400,
    Icon800x800,
    PC3840x2400,
    PC3840x2400,
    Icon800x800,
    PC3840x2400,
    PC3840x2400,
    Icon800x800,
  ];

  // ① media 側の要素リスト
  const mediaItems = [
    <GalleryImages key="gallery" images={galleryImages} />,
    <div key="extra" className={styles.extra_info}>
      <DescriptionSection description={product.description} />
      <FormatSection formats={product.formats} />
      <Tags tags={product.tags} />
    </div>,
  ];

  // ② info 側の要素リスト
  const infoItems = [
    <h1 key="title" className={styles.title}>
      {product.title}
    </h1>,
    <ActionButtons key="actions" actions={product.actions} />,
    <CreatorsSection key="creators" creators={product.creators} />,
    <SellersSection key="sellers" sellers={product.sellers} />,
    <PurchaseSection key="purchase" licenses={product.licenses} />,
    <VersionSection key="versions" versions={product.versions} />,
    <DetailSection key="detail" detail={product.detail} />,
    <footer key="report" className={styles.help_buttons}>
      <button className={styles.report}>報告</button>
    </footer>,
  ];

  // ③ モバイル時は mediaItems と infoItems を交互に繋げて列表示
  const mobileOrder = [
    mediaItems[0],
    infoItems[0],
    infoItems[1],
    infoItems[2],
    infoItems[3],
    infoItems[4],
    mediaItems[1],

    infoItems[5],
    infoItems[6],
    infoItems[7],
  ];

  return (
    <div>
      {isMobile ? (
        <div className={styles.card}>
          <div className={styles.vertical_list}>{mobileOrder}</div>
        </div>
      ) : (
        <div className={styles.card}>
          <div className={styles.media}>{mediaItems.map((el) => el)}</div>
          <div className={styles.info}>{infoItems.map((el) => el)}</div>
        </div>
      )}
    </div>
  );
};
export default ProductDetailCard;
</file>

<file path="components/ProductGallery.module.css">
.gallery {
  display: flex;
  flex-direction: column;
  gap: 0px;
}

.viewer {
  width: 100%;
  aspect-ratio: 1.5 / 1;
  background-color: #000000;
  overflow: hidden;
  border-radius: 8px;
  /* display: flex;
  justify-content: center; 
  align-items: center;      */
  /* border: 1px solid #363636; */
}

.main_image {
  width: 100%;
  height: 100%;
  object-fit: contain;
  object-position: center;
}

.thumbnails {
  cursor: grab;
  display: flex;
  gap: 8px;
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
  padding: 12px;
  /* scrollbar-width: none;
  -ms-overflow-style: none;  */
  min-width: 0px !important;
}

.thumbnail {
  width: 120px;
  aspect-ratio: 3 / 2;
  border-radius: 4px;
  object-fit: cover;
  cursor: pointer;
  transition: transform 0.2s ease;
}

.thumbnailsDragging {
  cursor: grabbing;
}

.thumbnail:hover {
  transform: scale(1.1);
  z-index: 10;
}

.thumbnail--active {
  outline: 2px solid #007bff;
  outline-offset: 2px;
  z-index: 10;
}
</file>

<file path="components/ProductGallery.tsx">
// src/features/seller/components/ProductGallery.tsx
import React, { useRef, useState } from "react";
import styles from "./ProductGallery.module.css";

interface ProductGalleryProps {
  images: string[];
}

const GalleryImages: React.FC<ProductGalleryProps> = ({ images }) => {
  const [selectedIndex, setSelectedIndex] = useState(0);

  // ドラッグ用の ref と state
  const thumbsRef = useRef<HTMLDivElement>(null);
  const isDown = useRef(false);
  const startX = useRef(0);
  const scrollStart = useRef(0);
  const [, setDragging] = useState(false);

  if (!images || images.length === 0) return null;

  // マウス用イベント
  const onMouseDown = (e: React.MouseEvent) => {
    if (!thumbsRef.current) return;
    isDown.current = true;
    setDragging(true);
    startX.current = e.pageX - thumbsRef.current.offsetLeft;
    scrollStart.current = thumbsRef.current.scrollLeft;
    e.preventDefault();
  };
  const onMouseMove = (e: React.MouseEvent) => {
    if (!isDown.current || !thumbsRef.current) return;
    e.preventDefault();
    const x = e.pageX - thumbsRef.current.offsetLeft;
    const walk = x - startX.current;
    thumbsRef.current.scrollLeft = scrollStart.current - walk;
  };
  const onMouseUpOrLeave = () => {
    isDown.current = false;
    setDragging(false);
  };

  // タッチ用イベント
  const onTouchStart = (e: React.TouchEvent) => {
    if (!thumbsRef.current) return;
    isDown.current = true;
    setDragging(true);
    startX.current = e.touches[0].pageX - thumbsRef.current.offsetLeft;
    scrollStart.current = thumbsRef.current.scrollLeft;
  };
  const onTouchMove = (e: React.TouchEvent) => {
    if (!isDown.current || !thumbsRef.current) return;
    const x = e.touches[0].pageX - thumbsRef.current.offsetLeft;
    const walk = x - startX.current;
    thumbsRef.current.scrollLeft = scrollStart.current - walk;
  };
  const onTouchEnd = () => {
    isDown.current = false;
    setDragging(false);
  };

  return (
    <div className={styles.gallery}>
      <div className={styles.viewer}>
        <img
          src={images[selectedIndex]}
          alt={`Image ${selectedIndex + 1}`}
          className={styles.main_image}
        />
      </div>

      <div
        ref={thumbsRef}
        className={`${styles.thumbnails} ${
          isDown.current ? styles.thumbnailsDragging : ""
        }`}
        onMouseDown={onMouseDown}
        onMouseMove={onMouseMove}
        onMouseUp={onMouseUpOrLeave}
        onMouseLeave={onMouseUpOrLeave}
        onTouchStart={onTouchStart}
        onTouchMove={onTouchMove}
        onTouchEnd={onTouchEnd}
      >
        {images.map((src, idx) => (
          <img
            key={idx}
            src={src}
            alt={`Thumbnail ${idx + 1}`}
            className={`${styles.thumbnail} ${
              selectedIndex === idx ? styles["thumbnail--active"] : ""
            }`}
            onMouseEnter={() => {
              // ドラッグ中でなければホバーで切り替え
              if (!isDown.current) {
                setSelectedIndex(idx);
              }
            }}
            onClick={() => {
              if (!isDown.current) {
                setSelectedIndex(idx);
              }
            }}
          />
        ))}
      </div>
    </div>
  );
};

export default GalleryImages;
</file>

<file path="components/PurchaseSection.module.css">
.section {
  /* margin-top: 1rem; */
  padding: 1.5rem;
  background-color: #f5f5f5;
  border-radius: 12px;
  /* box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05); */
}

.title {
  font-size: 1.25rem;
  margin-bottom: 1rem;
  color: #333;
}

.dropdown {
  position: relative;
  width: 100%;
}

/* 選択ボタン（セレクトの外観） */
.select {
  width: 100%;
  padding: 0.75rem 1rem;
  background: #fff;
  border: 1px solid #ccc;
  border-radius: 8px;
  cursor: pointer;
  display: flex;
  flex-direction: column;
  gap: 4px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.06);
  transition: border-color 0.2s ease;
}

.select:hover {
  border-color: #888;
}

/* ドロップダウンリスト */
.options {
  position: absolute;
  z-index: 10;
  margin-top: 8px;
  width: 100%;
  background: #fff;
  border: 1px solid #ccc;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  max-height: 250px;
  overflow-y: auto;
}

/* 各オプション項目 */
.option {
  padding: 12px 16px;
  display: flex;
  flex-direction: column;
  gap: 4px;
  cursor: pointer;
  transition: background 0.2s;
}

.option:hover,
.optionActive {
  background-color: #f0f8ff;
}

/* オプション内の行のスタイル */
.optionName {
  /* font-weight: 600; */
  font-size: 1rem;
  color: #363636;
}

.optionPrice {
  color: #363636;
  font-weight: 600;
  font-size: 1.3rem;
}

.stock {
  margin-top: 1rem;
  font-size: 1.05rem;
}

.actions {
  margin-top: 1rem;
  display: flex;
  gap: 1rem;
}

.button {
  flex: 1;
  padding: 0.75rem 1rem;
  font-size: 1rem;
  border: none;
  border-radius: 8px;
  transition: background-color 0.2s;

  display: flex; /* または display: flex; */
  align-items: center; /* 垂直方向の中央揃え */
  justify-content: center; /* 水平方向の中央揃え */
  gap: 0.5rem;
}

.button--buy {
  background-color: #363636;
  color: #fff;
}

.button--buy:hover {
  background-color: #000000;
}

.button--cart {
  background-color: #3654ff;
  color: #fff;
}

.button--cart:hover {
  background-color: #223cce;
}
</file>

<file path="components/PurchaseSection.tsx">
import React, { useState } from "react";
import {
  Listbox,
  ListboxButton,
  ListboxOptions,
  ListboxOption,
} from "@headlessui/react";
import styles from "./PurchaseSection.module.css";
import { Icon } from "@root/src/utils/Icon";
// import CartIcon from "./react.svg?react";

type LicenseEntry = {
  id: number;
  name: string;
  price: number;
};

interface PurchaseProps {
  licenses: LicenseEntry[];
}

const PurchaseSection: React.FC<PurchaseProps> = ({ licenses }) => {
  const [selectedLicense, setSelectedLicense] = useState<LicenseEntry | null>(
    licenses[0] ?? null
  );

  const [stockByLicense] = useState<Record<number, number>>({
    1: 5,
    2: 2,
  });

  return (
    <section className={styles.section}>
      <h2 className={styles.title}>ライセンス</h2>

      <Listbox value={selectedLicense} onChange={setSelectedLicense}>
        <div className={styles.dropdown}>
          <ListboxButton className={styles.select}>
            <span className={styles.optionName}>{selectedLicense?.name}</span>
            <span className={styles.optionPrice}>
              {selectedLicense?.price.toLocaleString()}円
            </span>
          </ListboxButton>

          <ListboxOptions className={styles.options}>
            {licenses.map((license) => (
              <ListboxOption
                key={license.id}
                value={license}
                className={({ focus }) =>
                  `${styles.option} ${focus ? styles.optionActive : ""}`
                }
              >
                <span className={styles.optionName}>{license.name}</span>
                <span className={styles.optionPrice}>
                  {license.price.toLocaleString()}円
                </span>
              </ListboxOption>
            ))}
          </ListboxOptions>
        </div>
      </Listbox>

      {selectedLicense && (
        <>
          <p className={styles.stock}>
            残り点数: {stockByLicense[selectedLicense.id] ?? "在庫情報なし"}
          </p>
          <div className={styles.actions}>
            <button className={`${styles.button} ${styles["button--buy"]}`}>
              <Icon name="bag-check" />
              今すぐ購入
            </button>
            <button className={`${styles.button} ${styles["button--cart"]}`}>
              <Icon name="cart-plus" />
              カートに入れる
            </button>
          </div>
        </>
      )}
    </section>
  );
};

export default PurchaseSection;
export type { LicenseEntry };
</file>

<file path="components/SellersSection.module.css">
/* Block: sellers-section */
.section {
  /* 必要に応じてラッピング全体のスタイルをここに */
}

/* Element: list */
.list {
  display: flex;
  gap: 12px;
  align-items: center;
  flex-wrap: nowrap;
  overflow-x: auto;
}

/* Element: label */
.label {
  font-weight: bold;
  margin-right: 8px;
}

/* Element: card */
.card {
  flex: 0 0 auto;
  width: 100px;
  aspect-ratio: 3 / 1;
  position: relative;
  background-color: #f0f0f0;
  border-radius: 6px;
  overflow: hidden;
  text-decoration: none;
}

/* Element: card-image */
.card_image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* Modifier: more-button */
.button--more {
  width: 36px;
  height: 36px;
  border: none;
  font-size: 0.5rem;
  cursor: pointer;
  background: #363636;
  /* padding: 12px; */
  border-radius: 6px;
}

/* Modal: title */
.modal_title {
  margin-bottom: 16px;
  font-size: 1.25rem;
}

/* Modal list */
.modal_list {
  display: grid;
  grid-template-columns: 1fr;
  gap: 24px;
  padding: 8px 0;
}
@media (min-width: 640px) {
  .modal_list {
    grid-template-columns: repeat(2, 1fr);
  }
}
@media (min-width: 768px) {
  .modal_list {
    grid-template-columns: repeat(3, 1fr);
  }
}
@media (min-width: 1024px) {
  .modal_list {
    grid-template-columns: repeat(4, 1fr);
  }
}

/* Modal item */
.item {
  width: 100%;
  max-width: 230px;
  margin: 0 auto;
  justify-self: center;
}

/* Modal link */
.item_link {
  display: block;
  border: 1px solid #e0e0e0;
  border-radius: 6px;
  overflow: hidden;
  background: #fff;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

/* Modal banner */
.item_banner {
  display: block;
  width: 100%;
  height: auto;
  object-fit: cover;
  border-radius: 6px;
}

/* Modal name */
.item_name {
  margin: 8px;
  font-size: 0.95rem;
  text-align: center;
  white-space: normal;
  word-break: break-all;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
  overflow: hidden;
}

a {
  text-decoration: none;
  color: inherit;
}
</file>

<file path="components/SellersSection.tsx">
import React, { useState } from "react";
import styles from "./SellersSection.module.css";
import Modal from "./Modal";
import { Icon } from "@root/src/utils/Icon";
interface SellersProps {
  sellers: {
    id: number;
    name: string;
    url: string;
    image: string;
  }[];
}

const SellersSection: React.FC<SellersProps> = ({ sellers }) => {
  const [showModal, setShowModal] = useState(false);
  if (!sellers || sellers.length === 0) {
    return null;
  }

  return (
    <div className={styles.section}>
      <section className={styles.list}>
        {/* <strong className="sellers-section__label">ショップ</strong> */}
        {sellers.slice(0, 4).map((s) => (
          <a key={s.id} href={s.url} className={styles.card}>
            <img src={s.image} alt={s.name} className={styles.card_image} />
          </a>
        ))}
        <button
          className={`${styles.button} ${styles["button--more"]}`}
          onClick={() => setShowModal(true)}
        >
          <Icon name="three-dots" fill="#fff" />
        </button>
      </section>

      {showModal && (
        <Modal onClose={() => setShowModal(false)}>
          <h3 className={styles.modal_title}>販売所一覧</h3>
          <div className={styles.modal_list}>
            {sellers.map((s) => (
              <div key={s.id} className={styles.item}>
                <a href={s.url} className={styles.item_ink}>
                  <img
                    src={s.image}
                    alt={s.name}
                    className={styles.item_banner}
                  />
                  <p className={styles.item_name}>{s.name}</p>
                </a>
              </div>
            ))}
          </div>
        </Modal>
      )}
    </div>
  );
};

export default SellersSection;
</file>

<file path="components/Tags.module.css">
.tags {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.tags_label {
  font-weight: bold;
  font-size: 0.9rem;
}

.tags_list {
  display: flex;
  gap: 4px;
  align-items: center;
  padding: 4px 8px;
}

.tags_badge {
  background: #f0f0f0;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 0.875rem;
}
</file>

<file path="components/Tags.tsx">
import React from "react";
import styles from "./tags.module.css";

interface TagProps {
  tags: string[];
}

const Tags: React.FC<TagProps> = ({ tags }) => {
  if (!tags || tags.length === 0) {
    return null;
  }

  return (
    <div className={styles.tags}>
      <div className={styles.tags_list}>
        <strong className={styles.tags_label}>タグ:</strong>
        {tags.map((t, i) => (
          <span key={i} className={styles.tags_badge}>
            {t}
          </span>
        ))}
      </div>
    </div>
  );
};

export default Tags;
</file>

<file path="components/VersionSection.module.css">
/* バージョン管理テーブル用スタイル */
.section {
  /* margin: 24px 0; */
  padding: 0px;
  /* background-color: #fafafa; */
  /* background-color: #ff0000; */
  border-radius: 8px;
  /* box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); */
}

.section h2 {
  margin-bottom: 12px;
  font-size: 1.25rem;
  color: #333;
}

/* テーブルをラップするコンテナでスクロール制御（固定高さ：6行分） */
.table_container {
  display: block;
  max-height: calc(6.7 * 48px); /* 6行分の固定高さ */
  min-height: calc(1 * 48px);
  overflow-y: auto;
  overflow-x: hidden;
  width: 100%;
}

.table {
  width: 100%;
  border-collapse: collapse;
  table-layout: fixed; /* 列幅を均等に固定 */
}

/* ヘッダー固定 */
.table thead th {
  position: sticky;
  top: 0;
  background-color: #f5f5f5;
  font-weight: 600;
  color: #555;
  padding: 12px 8px;
  text-align: left;
  border-bottom: 1px solid #e0e0e0;
  z-index: 1;
}

.table th,
.table td {
  padding: 12px 8px;
  text-align: left;
  border-bottom: 1px solid #e0e0e0;
  width: 25%; /* 列数が4つなら25%ずつ */
  box-sizing: border-box;
  white-space: nowrap;
}

/* 行のストライプ */
.table tbody tr:nth-child(even) {
  background-color: #ffffff;
}

.table tbody tr:nth-child(odd) {
  background-color: #fcfcfc;
}
/* 公開ステータス列の色分け */
.status--public {
  color: #2e7d32; /* 緑 */
  font-weight: bold;
}

.status--private {
  color: #c62828; /* 赤 */
  font-weight: bold;
}
</file>

<file path="components/VersionSection.tsx">
import React from "react";
import styles from "./VersionSection.module.css";

interface PurchaseProps {
  versions: {
    name: string;
    releaseDate: string;
    updatedAt: string;
    status: string;
  }[];
}

const VersionSection: React.FC<PurchaseProps> = ({ versions }) => {
  // if (!actions || actions.length === 0) {
  //   return null;
  // }

  return (
    <div>
      {/* バージョン管理テーブル */}
      <section className={styles.section}>
        <h2>バージョン管理</h2>
        <div className={styles.table_container}>
          <table className={styles.table}>
            <thead>
              <tr>
                <th>バージョン名</th>
                <th>リリース日</th>
                <th>更新日</th>
                <th>公開ステータス</th>
              </tr>
            </thead>
            <tbody>
              {versions.map((v, idx) => (
                <tr key={idx}>
                  <td>{v.name}</td>
                  <td>{v.releaseDate}</td>
                  <td>{v.updatedAt}</td>
                  <td
                    className={
                      v.status === "公開"
                        ? styles["status--public"]
                        : styles["status--private"]
                    }
                  >
                    {v.status}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </section>
    </div>
  );
};

export default VersionSection;
</file>

<file path="hooks/useMediaQuery.ts">
import { useState, useEffect } from "react";

export function useMediaQuery(query: string): boolean {
  const [matches, setMatches] = useState<boolean>(() => {
    if (typeof window === "undefined") return false;
    return window.matchMedia(query).matches;
  });

  useEffect(() => {
    const mql = window.matchMedia(query);
    const listener = (e: MediaQueryListEvent) => setMatches(e.matches);
    mql.addEventListener("change", listener);
    return () => mql.removeEventListener("change", listener);
  }, [query]);

  return matches;
}
</file>

<file path="pages/ProductPage.tsx">
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import ProductDetailCard from "../components/ProductDetailCard";
import { fetchProductById } from "../api/productAPI";

type LicenseEntry = {
  license: { id: number; name: string };
  price: number;
};

type Product = {
  id: string;
  title: string;
  description: string;
  thumbnail_url: string;
  images: string[];
  creators: { id: number; username: string }[];
  tags: { id: number; name: string }[];
  rating: string;
  allow_ai_use: boolean;
  is_ai_generated: boolean;
  formats: { format: string; info: Record<string, any> }[];
  licenses: LicenseEntry[];
  release_date: string;
  updated_at: string;
  view_count: number;
};

const ProductPage: React.FC = () => {
  const { productId } = useParams<{ productId: string }>();
  const [product, setProduct] = useState<Product | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!productId) return;
    fetchProductById(productId)
      .then((data) => setProduct(data))
      .catch((e) => setError(e.message));
  }, [productId]);

  if (error) return <div>エラー: {error}</div>;
  if (!product) return <div>読み込み中…</div>;

  return (
    <div className="product-page-container">
      <ProductDetailCard product={product} />
    </div>
  );
};

export default ProductPage;
</file>

</files>
