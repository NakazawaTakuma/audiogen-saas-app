This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
config/asgi.py
config/settings.py
config/urls.py
config/wsgi.py
manage.py
marketplace/admin/__init__.py
marketplace/admin/carts.py
marketplace/admin/licenses.py
marketplace/admin/notifications.py
marketplace/admin/orders.py
marketplace/admin/payments.py
marketplace/admin/products.py
marketplace/admin/reviews.py
marketplace/admin/users.py
marketplace/admin/wishlists.py
marketplace/apps.py
marketplace/migrations/0001_initial.py
marketplace/models.py
marketplace/models/__init__.py
marketplace/models/cart/cart.py
marketplace/models/cart/item.py
marketplace/models/license/download.py
marketplace/models/license/license_key.py
marketplace/models/notification/notification.py
marketplace/models/order/item.py
marketplace/models/order/order.py
marketplace/models/payment/payment.py
marketplace/models/product/asset.py
marketplace/models/product/category.py
marketplace/models/product/product.py
marketplace/models/product/tag.py
marketplace/models/review/review.py
marketplace/models/user/__init__.py
marketplace/models/user/activity.py
marketplace/models/user/address.py
marketplace/models/user/billing.py
marketplace/models/user/core.py
marketplace/models/user/preferences.py
marketplace/models/user/profile.py
marketplace/models/user/roles.py
marketplace/models/wishlist/item.py
marketplace/models/wishlist/wishlist.py
marketplace/serializers/cart/cart.py
marketplace/serializers/cart/item.py
marketplace/serializers/license/download.py
marketplace/serializers/license/license_key.py
marketplace/serializers/notification/notification.py
marketplace/serializers/order/item.py
marketplace/serializers/order/order.py
marketplace/serializers/payment/payment.py
marketplace/serializers/product/asset.py
marketplace/serializers/product/category.py
marketplace/serializers/product/product.py
marketplace/serializers/product/tag.py
marketplace/serializers/review/review.py
marketplace/serializers/user/activity.py
marketplace/serializers/user/address.py
marketplace/serializers/user/billing.py
marketplace/serializers/user/core.py
marketplace/serializers/user/preferences.py
marketplace/serializers/user/profile.py
marketplace/serializers/user/roles.py
marketplace/serializers/wishlist/item.py
marketplace/serializers/wishlist/wishlist.py
marketplace/tests.py
marketplace/urls/auth.py
marketplace/urls/cart.py
marketplace/urls/license.py
marketplace/urls/notification.py
marketplace/urls/order.py
marketplace/urls/payment.py
marketplace/urls/product.py
marketplace/urls/review.py
marketplace/urls/user.py
marketplace/urls/wishlist.py
marketplace/views.py
marketplace/views/cart/cart.py
marketplace/views/cart/item.py
marketplace/views/license/download.py
marketplace/views/license/license_key.py
marketplace/views/notification/notification.py
marketplace/views/order/item.py
marketplace/views/order/order.py
marketplace/views/payment/payment.py
marketplace/views/product_views.py
marketplace/views/product/asset.py
marketplace/views/product/category.py
marketplace/views/product/product.py
marketplace/views/product/tag.py
marketplace/views/review/review.py
marketplace/views/user/activity.py
marketplace/views/user/address.py
marketplace/views/user/billing.py
marketplace/views/user/core.py
marketplace/views/user/preferences.py
marketplace/views/user/profile.py
marketplace/views/user/roles.py
marketplace/views/wishlist/item.py
marketplace/views/wishlist/wishlist.py
requirements.txt
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="config/asgi.py">
"""
ASGI config for config project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")

application = get_asgi_application()
</file>

<file path="config/settings.py">
"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-cjl@5h+duf7)!-guf5_k6l0je@!d(8y5$qgk5=on53!n@dh&z*"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'corsheaders',                   # ← 追加
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'rest_framework',  # Django REST Framework
    'marketplace',     # 作成したアプリケーション
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # ← 一番上に追加
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 開発時だけなら、全オリジン許可でも OK
# CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = [
    'http://localhost:5173',   # Vite dev サーバー
    'http://127.0.0.1:8001',    # Django API を立ち上げたポート
]
</file>

<file path="config/urls.py">
from django.contrib import admin
from django.urls import path, include


urlpatterns = [
    path('admin/', admin.site.urls),
    # ユーザー関連
    path('api/', include('marketplace.urls.user')),
    # 商品関連
    path('api/', include('marketplace.urls.product')),
    # カート関連
    path('api/', include('marketplace.urls.cart')),
    # 認証 (JWT)
    path('api/', include('marketplace.urls.auth')),
    # ライセンス関連
    path('api/', include('marketplace.urls.license')),
    # 通知関連
    path('api/', include('marketplace.urls.notification')),
    # 決済関連
    path('api/', include('marketplace.urls.payment')),
    # レビュー関連
    path('api/', include('marketplace.urls.review')),
    # 注文関連
    path('api/', include('marketplace.urls.order')),
    # ウィッシュリスト関連
    path('api/', include('marketplace.urls.wishlist')),
]
</file>

<file path="config/wsgi.py">
"""
WSGI config for config project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")

application = get_wsgi_application()
</file>

<file path="manage.py">
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()
</file>

<file path="marketplace/admin/__init__.py">
# marketplace/admin/__init__.py

# Import all admin submodules to register models in Django admin site
from .users import *
from .products import *
from .carts import *
from .orders import *
from .payments import *
from .licenses import *
from .reviews import *
from .notifications import *
from .wishlists import *
</file>

<file path="marketplace/admin/carts.py">
from django.contrib import admin
from marketplace.models.cart.cart import Cart
from marketplace.models.cart.item import CartItem

admin.site.register(Cart)
admin.site.register(CartItem)
</file>

<file path="marketplace/admin/licenses.py">
from django.contrib import admin
from marketplace.models.license.download import DownloadHistory
from marketplace.models.license.license_key import LicenseKey

admin.site.register(DownloadHistory)
admin.site.register(LicenseKey)
</file>

<file path="marketplace/admin/notifications.py">
from django.contrib import admin
from marketplace.models.notification.notification import Notification

admin.site.register(Notification)
</file>

<file path="marketplace/admin/orders.py">
from django.contrib import admin
from marketplace.models.order.order import Order
from marketplace.models.order.item import OrderItem

admin.site.register(Order)
admin.site.register(OrderItem)
</file>

<file path="marketplace/admin/payments.py">
from django.contrib import admin
from marketplace.models.payment.payment import Payment
from marketplace.models.user.billing import PaymentMethod, BillingRecord

admin.site.register(PaymentMethod)
admin.site.register(BillingRecord)
admin.site.register(Payment)
</file>

<file path="marketplace/admin/products.py">
from django.contrib import admin
from marketplace.models.product.product import Product as DigitalProduct
from marketplace.models.product.category import Category
from marketplace.models.product.tag import Tag as ProductTag
from marketplace.models.product.asset import ProductAsset

admin.site.register(DigitalProduct)
admin.site.register(Category)
admin.site.register(ProductTag)
admin.site.register(ProductAsset)
</file>

<file path="marketplace/admin/reviews.py">
from django.contrib import admin
from marketplace.models.review.review import Review

admin.site.register(Review)
</file>

<file path="marketplace/admin/users.py">
from django.contrib import admin
from marketplace.models.user.core import User
from marketplace.models.user.profile import Profile
from marketplace.models.user.preferences import Preferences
from marketplace.models.user.roles import Role, UserRole
from marketplace.models.user.address import Address
from marketplace.models.user.activity import ActivityLog

admin.site.register(User)
admin.site.register(Profile)
admin.site.register(Preferences)
admin.site.register(Role)
admin.site.register(UserRole)
admin.site.register(Address)
admin.site.register(ActivityLog)
</file>

<file path="marketplace/admin/wishlists.py">
from django.contrib import admin
from marketplace.models.wishlist.wishlist import Wishlist
from marketplace.models.wishlist.item import WishlistItem

admin.site.register(Wishlist)
admin.site.register(WishlistItem)
</file>

<file path="marketplace/apps.py">
from django.apps import AppConfig


class MarketplaceConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "marketplace"
</file>

<file path="marketplace/migrations/0001_initial.py">
# Generated by Django 5.2 on 2025-05-03 18:17

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Cart",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="作成日時"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="更新日時"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order_number",
                    models.CharField(
                        help_text="ユニーク注文番号", max_length=100, unique=True
                    ),
                ),
                (
                    "total_amount",
                    models.DecimalField(
                        decimal_places=2, help_text="合計金額", max_digits=10
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="USD", help_text="通貨コード", max_length=10
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("completed", "Completed"),
                            ("refunded", "Refunded"),
                        ],
                        default="pending",
                        help_text="注文状態",
                        max_length=20,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="作成日時"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="更新日時"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PaymentMethod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        help_text="支払い方法種別（カード、PayPalなど）", max_length=50
                    ),
                ),
                ("details", models.JSONField(help_text="支払い情報詳細（暗号化保存）")),
                (
                    "is_default",
                    models.BooleanField(
                        default=False, help_text="デフォルト支払い方法かどうか"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="ロール名称", max_length=50, unique=True
                    ),
                ),
                (
                    "permissions",
                    models.JSONField(
                        blank=True, default=list, help_text="権限リスト（JSON配列）"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(help_text="タグ名", max_length=100)),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="URL用一意スラッグ",
                        null=True,
                        unique=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(help_text="カテゴリ名", max_length=100)),
                ("slug", models.SlugField(help_text="URL用一意スラッグ", unique=True)),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="作成日時"),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="親カテゴリ",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="marketplace.category",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrderItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "unit_price",
                    models.DecimalField(
                        decimal_places=2, help_text="単価", max_digits=10
                    ),
                ),
                ("quantity", models.PositiveIntegerField(default=1, help_text="数量")),
                (
                    "order",
                    models.ForeignKey(
                        help_text="親注文",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="marketplace.order",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LicenseKey",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "key",
                    models.CharField(
                        help_text="ライセンスキー", max_length=255, unique=True
                    ),
                ),
                (
                    "issued_at",
                    models.DateTimeField(auto_now_add=True, help_text="発行日時"),
                ),
                (
                    "expires_at",
                    models.DateTimeField(blank=True, help_text="有効期限", null=True),
                ),
                (
                    "order_item",
                    models.ForeignKey(
                        help_text="関連購入アイテム",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="licenses",
                        to="marketplace.orderitem",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "payment_id",
                    models.CharField(help_text="外部決済ID", max_length=200),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2, help_text="決済金額", max_digits=10
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="USD", help_text="通貨コード", max_length=10
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("succeeded", "Succeeded"), ("failed", "Failed")],
                        default="pending",
                        help_text="決済状態",
                        max_length=20,
                    ),
                ),
                (
                    "paid_at",
                    models.DateTimeField(
                        blank=True, help_text="支払完了日時", null=True
                    ),
                ),
                (
                    "order",
                    models.OneToOneField(
                        help_text="関連注文",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment",
                        to="marketplace.order",
                    ),
                ),
                (
                    "payment_method",
                    models.ForeignKey(
                        help_text="使用した支払い方法",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="marketplace.paymentmethod",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(help_text="商品タイトル", max_length=200)),
                ("description", models.TextField(help_text="商品説明")),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2, default=0, help_text="販売価格", max_digits=10
                    ),
                ),
                (
                    "discount_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="割引価格",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("pending", "Pending"),
                            ("published", "Published"),
                        ],
                        default="draft",
                        help_text="公開状態",
                        max_length=20,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="作成日時"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="更新日時"),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True,
                        help_text="紐づくカテゴリ",
                        related_name="products",
                        to="marketplace.category",
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True,
                        help_text="紐づくタグ",
                        related_name="products",
                        to="marketplace.tag",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="orderitem",
            name="product",
            field=models.ForeignKey(
                help_text="注文商品",
                on_delete=django.db.models.deletion.CASCADE,
                to="marketplace.product",
            ),
        ),
        migrations.CreateModel(
            name="CartItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.PositiveIntegerField(default=1, help_text="数量")),
                (
                    "cart",
                    models.ForeignKey(
                        help_text="親カート",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="marketplace.cart",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="カート商品",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="marketplace.product",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProductAsset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        help_text="アップロードファイル", upload_to="product_assets/"
                    ),
                ),
                (
                    "preview_image",
                    models.ImageField(
                        blank=True,
                        help_text="プレビュー画像",
                        null=True,
                        upload_to="product_previews/",
                    ),
                ),
                (
                    "asset_type",
                    models.CharField(
                        choices=[
                            ("full_zip", "Full ZIP"),
                            ("thumbnail", "Thumbnail"),
                            ("preview_video", "Preview Video"),
                        ],
                        help_text="アセット種別",
                        max_length=20,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="作成日時"),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="関連商品",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assets",
                        to="marketplace.product",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="一意のメールアドレスを使用します",
                        max_length=254,
                        unique=True,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="このユーザーが所属するグループ",
                        related_name="marketplace_user_set",
                        to="auth.group",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="このユーザーに割り当てられた権限",
                        related_name="marketplace_user_set",
                        to="auth.permission",
                    ),
                ),
            ],
            options={
                "verbose_name": "ユーザー",
                "verbose_name_plural": "ユーザー",
                "ordering": ["-date_joined"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rating", models.PositiveSmallIntegerField(help_text="評価点数(1-5)")),
                ("comment", models.TextField(blank=True, help_text="コメント内容")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="投稿日時"),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="対象商品",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="marketplace.product",
                    ),
                ),
                (
                    "reviewer",
                    models.ForeignKey(
                        help_text="レビュー投稿者",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="marketplace.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "display_name",
                    models.CharField(blank=True, help_text="表示名", max_length=100),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        help_text="プロフィール画像",
                        null=True,
                        upload_to="avatars/",
                    ),
                ),
                ("bio", models.TextField(blank=True, help_text="自己紹介文")),
                (
                    "website_url",
                    models.URLField(blank=True, help_text="ウェブサイトURL"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="参照先のユーザー",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to="marketplace.user",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="product",
            name="seller",
            field=models.ForeignKey(
                blank=True,
                help_text="出品者ユーザー",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="products",
                to="marketplace.user",
            ),
        ),
        migrations.CreateModel(
            name="Preferences",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        default="en", help_text="表示言語コード", max_length=10
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="UTC", help_text="タイムゾーン", max_length=50
                    ),
                ),
                (
                    "email_notifications",
                    models.BooleanField(
                        default=True, help_text="メール通知を受け取るかどうか"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="参照先のユーザー",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="preferences",
                        to="marketplace.user",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="paymentmethod",
            name="user",
            field=models.ForeignKey(
                help_text="支払い方法を持つユーザー",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="payment_methods",
                to="marketplace.user",
            ),
        ),
        migrations.AddField(
            model_name="order",
            name="buyer",
            field=models.ForeignKey(
                help_text="購入者ユーザー",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="orders",
                to="marketplace.user",
            ),
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("type", models.CharField(help_text="通知種別", max_length=50)),
                ("message", models.TextField(help_text="通知メッセージ")),
                ("is_read", models.BooleanField(default=False, help_text="既読フラグ")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="作成日時"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="通知受信者",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="marketplace.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DownloadHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "downloaded_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="ダウンロード日時"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(help_text="ダウンロード時IPアドレス"),
                ),
                (
                    "asset",
                    models.ForeignKey(
                        help_text="ダウンロードアセット",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="downloads",
                        to="marketplace.productasset",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="ダウンロードユーザー",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="downloads",
                        to="marketplace.user",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="cart",
            name="user",
            field=models.OneToOneField(
                help_text="カート所有者",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="cart",
                to="marketplace.user",
            ),
        ),
        migrations.CreateModel(
            name="BillingRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2, help_text="請求金額", max_digits=10
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="USD", help_text="通貨コード", max_length=10
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, help_text="請求内容の説明", max_length=255
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="請求日時"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="請求対象のユーザー",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="billing_records",
                        to="marketplace.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        help_text="住所種別（billing/shippingなど）", max_length=20
                    ),
                ),
                ("line1", models.CharField(help_text="住所行1", max_length=255)),
                (
                    "line2",
                    models.CharField(blank=True, help_text="住所行2", max_length=255),
                ),
                ("city", models.CharField(help_text="市区町村", max_length=100)),
                ("state", models.CharField(help_text="都道府県/州", max_length=100)),
                ("postal_code", models.CharField(help_text="郵便番号", max_length=20)),
                (
                    "country",
                    models.CharField(help_text="国コード (ISO2)", max_length=2),
                ),
                (
                    "phone_number",
                    models.CharField(blank=True, help_text="電話番号", max_length=20),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="住所情報を持つユーザー",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="addresses",
                        to="marketplace.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ActivityLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        help_text="実行されたアクション内容", max_length=100
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(help_text="実行時のIPアドレス"),
                ),
                (
                    "user_agent",
                    models.CharField(
                        help_text="実行時のユーザーエージェント情報", max_length=255
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="アクション実行日時"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="アクションを実行したユーザー",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activity_logs",
                        to="marketplace.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        help_text="付与されるロール",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="role_users",
                        to="marketplace.role",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="ロールを付与するユーザー",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_roles",
                        to="marketplace.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Wishlist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="作成日時"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="リスト所有者",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="wishlist",
                        to="marketplace.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WishlistItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "added_at",
                    models.DateTimeField(auto_now_add=True, help_text="追加日時"),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="ウィッシュリスト商品",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="marketplace.product",
                    ),
                ),
                (
                    "wishlist",
                    models.ForeignKey(
                        help_text="親ウィッシュリスト",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="marketplace.wishlist",
                    ),
                ),
            ],
        ),
    ]
</file>

<file path="marketplace/models.py">
from django.db import models

# Create your models here.
</file>

<file path="marketplace/models/__init__.py">
from .user import *
from .product import *
from .order import *
from .cart import *
from .wishlist import *
from .payment import *
from .license import *
from .review import *
from .notification import *
</file>

<file path="marketplace/models/cart/cart.py">
# marketplace/models/cart/cart.py
from django.db import models
from marketplace.models.user.core import User

class Cart(models.Model):
    """カート（ユーザーごと）"""
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='cart', help_text="カート所有者")
    created_at = models.DateTimeField(auto_now_add=True, help_text="作成日時")
    updated_at = models.DateTimeField(auto_now=True, help_text="更新日時")
</file>

<file path="marketplace/models/cart/item.py">
# marketplace/models/cart/item.py
from django.db import models
from .cart import Cart
from marketplace.models.product.product import Product

class CartItem(models.Model):
    """カートアイテム"""
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name='items', help_text="親カート")
    product = models.ForeignKey(Product, on_delete=models.CASCADE, help_text="カート商品")
    quantity = models.PositiveIntegerField(default=1, help_text="数量")
</file>

<file path="marketplace/models/license/download.py">
# marketplace/models/license/download.py
from django.db import models
from marketplace.models.user.core import User
from marketplace.models.product.asset import ProductAsset

class DownloadHistory(models.Model):
    """ダウンロード履歴"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='downloads', help_text="ダウンロードユーザー")
    asset = models.ForeignKey(ProductAsset, on_delete=models.CASCADE, related_name='downloads', help_text="ダウンロードアセット")
    downloaded_at = models.DateTimeField(auto_now_add=True, help_text="ダウンロード日時")
    ip_address = models.GenericIPAddressField(help_text="ダウンロード時IPアドレス")
</file>

<file path="marketplace/models/license/license_key.py">
# marketplace/models/license/license_key.py
from django.db import models
from marketplace.models.order.item import OrderItem

class LicenseKey(models.Model):
    """ライセンスキー管理"""
    order_item = models.ForeignKey(OrderItem, on_delete=models.CASCADE, related_name='licenses', help_text="関連購入アイテム")
    key = models.CharField(max_length=255, unique=True, help_text="ライセンスキー")
    issued_at = models.DateTimeField(auto_now_add=True, help_text="発行日時")
    expires_at = models.DateTimeField(null=True, blank=True, help_text="有効期限")
</file>

<file path="marketplace/models/notification/notification.py">
# marketplace/models/notification/notification.py
from django.db import models
from marketplace.models.user.core import User

class Notification(models.Model):
    """システム通知"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='notifications', help_text="通知受信者")
    type = models.CharField(max_length=50, help_text="通知種別")
    message = models.TextField(help_text="通知メッセージ")
    is_read = models.BooleanField(default=False, help_text="既読フラグ")
    created_at = models.DateTimeField(auto_now_add=True, help_text="作成日時")
</file>

<file path="marketplace/models/order/item.py">
# marketplace/models/order/item.py
from django.db import models
from .order import Order
from marketplace.models.product.product import Product

class OrderItem(models.Model):
    """注文アイテム"""
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items', help_text="親注文")
    product = models.ForeignKey(Product, on_delete=models.CASCADE, help_text="注文商品")
    unit_price = models.DecimalField(max_digits=10, decimal_places=2, help_text="単価")
    quantity = models.PositiveIntegerField(default=1, help_text="数量")
</file>

<file path="marketplace/models/order/order.py">
# marketplace/models/order/order.py
from django.db import models
from marketplace.models.user.core import User

class Order(models.Model):
    """注文情報"""
    buyer = models.ForeignKey(User, on_delete=models.CASCADE, related_name='orders', help_text="購入者ユーザー")
    order_number = models.CharField(max_length=100, unique=True, help_text="ユニーク注文番号")
    total_amount = models.DecimalField(max_digits=10, decimal_places=2, help_text="合計金額")
    currency = models.CharField(max_length=10, default='USD', help_text="通貨コード")
    status = models.CharField(
        max_length=20,
        choices=[('pending','Pending'), ('completed','Completed'), ('refunded','Refunded')],
        default='pending',
        help_text="注文状態"
    )
    created_at = models.DateTimeField(auto_now_add=True, help_text="作成日時")
    updated_at = models.DateTimeField(auto_now=True, help_text="更新日時")

    def __str__(self):
        return self.order_number
</file>

<file path="marketplace/models/payment/payment.py">
# marketplace/models/payment/payment.py
from django.db import models
from marketplace.models.order.order import Order
from marketplace.models.user.billing import PaymentMethod, BillingRecord

class Payment(models.Model):
    """決済情報"""
    order = models.OneToOneField(Order, on_delete=models.CASCADE, related_name='payment', help_text="関連注文")
    payment_method = models.ForeignKey(PaymentMethod, on_delete=models.SET_NULL, null=True, help_text="使用した支払い方法")
    payment_id = models.CharField(max_length=200, help_text="外部決済ID")
    amount = models.DecimalField(max_digits=10, decimal_places=2, help_text="決済金額")
    currency = models.CharField(max_length=10, default='USD', help_text="通貨コード")
    status = models.CharField(max_length=20, choices=[('succeeded','Succeeded'), ('failed','Failed')], default='pending', help_text="決済状態")
    paid_at = models.DateTimeField(null=True, blank=True, help_text="支払完了日時")
</file>

<file path="marketplace/models/product/asset.py">
# marketplace/models/product/asset.py
from django.db import models
from .product import Product

class ProductAsset(models.Model):
    """商品アセット（ファイル／プレビュー）"""
    ASSET_TYPES = [('full_zip','Full ZIP'), ('thumbnail','Thumbnail'), ('preview_video','Preview Video')]
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='assets', help_text="関連商品")
    file = models.FileField(upload_to='product_assets/', help_text="アップロードファイル")
    preview_image = models.ImageField(upload_to='product_previews/', null=True, blank=True, help_text="プレビュー画像")
    asset_type = models.CharField(max_length=20, choices=ASSET_TYPES, help_text="アセット種別")
    created_at = models.DateTimeField(auto_now_add=True, help_text="作成日時")
</file>

<file path="marketplace/models/product/category.py">
# marketplace/models/product/category.py
from django.db import models

class Category(models.Model):
    """商品カテゴリ"""
    name = models.CharField(max_length=100, help_text="カテゴリ名")
    slug = models.SlugField(unique=True, help_text="URL用一意スラッグ")
    parent = models.ForeignKey(
        'self', null=True, blank=True, related_name='children', on_delete=models.CASCADE,
        help_text="親カテゴリ"
    )
    created_at = models.DateTimeField(auto_now_add=True, help_text="作成日時")

    def __str__(self):
        return self.name
</file>

<file path="marketplace/models/product/product.py">
# marketplace/models/product/product.py
from django.db import models
from marketplace.models.user.core import User
from .category import Category
from .tag import Tag

class Product(models.Model):
    """デジタルコンテンツ商品"""
    seller = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True, related_name='products', help_text="出品者ユーザー")
    title = models.CharField(max_length=200, help_text="商品タイトル")
    description = models.TextField(help_text="商品説明")
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0, help_text="販売価格")
    discount_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True, help_text="割引価格")
    status = models.CharField(
        max_length=20,
        choices=[('draft','Draft'), ('pending','Pending'), ('published','Published')],
        default='draft',
        help_text="公開状態"
    )
    categories = models.ManyToManyField(Category, related_name='products', blank=True, help_text="紐づくカテゴリ")
    tags = models.ManyToManyField(Tag, related_name='products', blank=True, help_text="紐づくタグ")
    created_at = models.DateTimeField(auto_now_add=True, help_text="作成日時")
    updated_at = models.DateTimeField(auto_now=True, help_text="更新日時")

    def __str__(self):
        return self.title
</file>

<file path="marketplace/models/product/tag.py">
# marketplace/models/product/tag.py
from django.db import models

class Tag(models.Model):
    """商品タグ"""
    name = models.CharField(max_length=100, help_text="タグ名")
    slug = models.SlugField(unique=True,null=True,blank=True, help_text="URL用一意スラッグ")

    def __str__(self):
        return self.name
</file>

<file path="marketplace/models/review/review.py">
# marketplace/models/review/review.py
from django.db import models
from marketplace.models.user.core import User
from marketplace.models.product.product import Product

class Review(models.Model):
    """商品レビュー"""
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='reviews', help_text="対象商品")
    reviewer = models.ForeignKey(User, on_delete=models.CASCADE, help_text="レビュー投稿者")
    rating = models.PositiveSmallIntegerField(help_text="評価点数(1-5)")
    comment = models.TextField(blank=True, help_text="コメント内容")
    created_at = models.DateTimeField(auto_now_add=True, help_text="投稿日時")
</file>

<file path="marketplace/models/user/__init__.py">
# marketplace/models/user/__init__.py
from .core import User
from .profile import Profile
from .preferences import Preferences
from .roles import Role, UserRole
from .billing import PaymentMethod, BillingRecord
from .address import Address
from .activity import ActivityLog
</file>

<file path="marketplace/models/user/activity.py">
# marketplace/models/user/activity.py
from django.db import models
from .core import User

class ActivityLog(models.Model):
    """ユーザー活動履歴"""
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='activity_logs',
        help_text="アクションを実行したユーザー"
    )
    action = models.CharField(
        max_length=100,
        help_text="実行されたアクション内容"
    )
    ip_address = models.GenericIPAddressField(
        help_text="実行時のIPアドレス"
    )
    user_agent = models.CharField(
        max_length=255,
        help_text="実行時のユーザーエージェント情報"
    )
    created_at = models.DateTimeField(
        auto_now_add=True,
        help_text="アクション実行日時"
    )
</file>

<file path="marketplace/models/user/address.py">
# marketplace/models/user/address.py
from django.db import models
from .core import User

class Address(models.Model):
    """ユーザー住所・連絡先"""
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='addresses',
        help_text="住所情報を持つユーザー"
    )
    type = models.CharField(
        max_length=20,
        help_text="住所種別（billing/shippingなど）"
    )
    line1 = models.CharField(
        max_length=255,
        help_text="住所行1"
    )
    line2 = models.CharField(
        max_length=255,
        blank=True,
        help_text="住所行2"
    )
    city = models.CharField(
        max_length=100,
        help_text="市区町村"
    )
    state = models.CharField(
        max_length=100,
        help_text="都道府県/州"
    )
    postal_code = models.CharField(
        max_length=20,
        help_text="郵便番号"
    )
    country = models.CharField(
        max_length=2,
        help_text="国コード (ISO2)"
    )
    phone_number = models.CharField(
        max_length=20,
        blank=True,
        help_text="電話番号"
    )
</file>

<file path="marketplace/models/user/billing.py">
# marketplace/models/user/billing.py
from django.db import models
from .core import User

class PaymentMethod(models.Model):
    """ユーザー請求・支払い方法"""
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='payment_methods',
        help_text="支払い方法を持つユーザー"
    )
    type = models.CharField(
        max_length=50,
        help_text="支払い方法種別（カード、PayPalなど）"
    )
    details = models.JSONField(
        help_text="支払い情報詳細（暗号化保存）"
    )
    is_default = models.BooleanField(
        default=False,
        help_text="デフォルト支払い方法かどうか"
    )

class BillingRecord(models.Model):
    """請求履歴"""
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='billing_records',
        help_text="請求対象のユーザー"
    )
    amount = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        help_text="請求金額"
    )
    currency = models.CharField(
        max_length=10,
        default='USD',
        help_text="通貨コード"
    )
    description = models.CharField(
        max_length=255,
        blank=True,
        help_text="請求内容の説明"
    )
    created_at = models.DateTimeField(
        auto_now_add=True,
        help_text="請求日時"
    )
</file>

<file path="marketplace/models/user/core.py">
# marketplace/models/user/core.py
from django.contrib.auth.models import AbstractUser, Group, Permission
from django.db import models

class User(AbstractUser):
    """
    コア認証情報モデル
    
    Fields (AbstractUser継承):
      - username (str): ユーザー名
      - email (EmailField): メールアドレス（ユニーク、必須）
      - password (str): パスワードハッシュ
      - is_active (bool): アクティブフラグ
      - is_staff (bool): スタッフ権限フラグ
      - is_superuser (bool): スーパーユーザー権限フラグ
      - last_login (datetime): 最終ログイン日時
      - date_joined (datetime): アカウント作成日時
    """
    email = models.EmailField(
        unique=True,
        help_text="一意のメールアドレスを使用します"
    )

    
    # デフォルトの auth.User と related_name が衝突しないよう上書き
    groups = models.ManyToManyField(
        Group,
        related_name='marketplace_user_set',
        blank=True,
        help_text='このユーザーが所属するグループ'
    )
    user_permissions = models.ManyToManyField(
        Permission,
        related_name='marketplace_user_set',
        blank=True,
        help_text='このユーザーに割り当てられた権限'
    )



    REQUIRED_FIELDS = ['email']

    class Meta:
        verbose_name = 'ユーザー'
        verbose_name_plural = 'ユーザー'
        ordering = ['-date_joined']

    def __str__(self):
        return self.username
</file>

<file path="marketplace/models/user/preferences.py">
# marketplace/models/user/preferences.py
from django.db import models
from .core import User

class Preferences(models.Model):
    """ユーザー設定・プリファレンス"""
    user = models.OneToOneField(
        User,
        on_delete=models.CASCADE,
        related_name='preferences',
        help_text="参照先のユーザー"
    )
    language = models.CharField(
        max_length=10,
        default='en',
        help_text="表示言語コード"
    )
    timezone = models.CharField(
        max_length=50,
        default='UTC',
        help_text="タイムゾーン"
    )
    email_notifications = models.BooleanField(
        default=True,
        help_text="メール通知を受け取るかどうか"
    )
</file>

<file path="marketplace/models/user/profile.py">
# marketplace/models/user/profile.py
from django.db import models
from .core import User

class Profile(models.Model):
    """ユーザープロフィール情報"""
    user = models.OneToOneField(
        User,
        on_delete=models.CASCADE,
        related_name='profile',
        help_text="参照先のユーザー"
    )
    display_name = models.CharField(
        max_length=100,
        blank=True,
        help_text="表示名"
    )
    avatar = models.ImageField(
        upload_to='avatars/',
        blank=True,
        null=True,
        help_text="プロフィール画像"
    )
    bio = models.TextField(
        blank=True,
        help_text="自己紹介文"
    )
    website_url = models.URLField(
        blank=True,
        help_text="ウェブサイトURL"
    )
</file>

<file path="marketplace/models/user/roles.py">
# marketplace/models/user/roles.py
from django.db import models
from .core import User

class Role(models.Model):
    """ユーザーロール"""
    name = models.CharField(
        max_length=50,
        unique=True,
        help_text="ロール名称"
    )
    permissions = models.JSONField(
        blank=True,
        default=list,
        help_text="権限リスト（JSON配列）"
    )

class UserRole(models.Model):
    """ユーザーとロール紐付け"""
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='user_roles',
        help_text="ロールを付与するユーザー"
    )
    role = models.ForeignKey(
        Role,
        on_delete=models.CASCADE,
        related_name='role_users',
        help_text="付与されるロール"
    )
</file>

<file path="marketplace/models/wishlist/item.py">
# marketplace/models/wishlist/item.py
from django.db import models
from .wishlist import Wishlist
from marketplace.models.product.product import Product

class WishlistItem(models.Model):
    """ウィッシュリストアイテム"""
    wishlist = models.ForeignKey(Wishlist, on_delete=models.CASCADE, related_name='items', help_text="親ウィッシュリスト")
    product = models.ForeignKey(Product, on_delete=models.CASCADE, help_text="ウィッシュリスト商品")
    added_at = models.DateTimeField(auto_now_add=True, help_text="追加日時")
</file>

<file path="marketplace/models/wishlist/wishlist.py">
# marketplace/models/wishlist/wishlist.py
from django.db import models
from marketplace.models.user.core import User

class Wishlist(models.Model):
    """ウィッシュリスト（ユーザーごと）"""
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='wishlist', help_text="リスト所有者")
    created_at = models.DateTimeField(auto_now_add=True, help_text="作成日時")
</file>

<file path="marketplace/serializers/cart/cart.py">
# serializers/cart/cart.py
from rest_framework import serializers
from marketplace.models.cart.cart import Cart

class CartSerializer(serializers.ModelSerializer):
    """カートシリアライザ"""
    class Meta:
        model = Cart
        fields = ['id', 'user', 'created_at', 'updated_at']
        read_only_fields = ['id', 'user', 'created_at', 'updated_at']
</file>

<file path="marketplace/serializers/cart/item.py">
# serializers/cart/item.py
from rest_framework import serializers
from marketplace.models.cart.item import CartItem
from .cart import CartSerializer

class CartItemSerializer(serializers.ModelSerializer):
    """カートアイテムシリアライザ"""
    cart = CartSerializer(read_only=True)

    class Meta:
        model = CartItem
        fields = ['id', 'cart', 'product', 'quantity']
        read_only_fields = ['id', 'cart']
</file>

<file path="marketplace/serializers/license/download.py">
# serializers/license/download.py
from rest_framework import serializers
from marketplace.models.license.download import DownloadHistory

class DownloadHistorySerializer(serializers.ModelSerializer):
    """ダウンロード履歴シリアライザ"""
    class Meta:
        model = DownloadHistory
        fields = ['id', 'user', 'asset', 'downloaded_at', 'ip_address']
        read_only_fields = ['id', 'downloaded_at']
</file>

<file path="marketplace/serializers/license/license_key.py">
# serializers/license/license_key.py
from rest_framework import serializers
from marketplace.models.license.license_key import LicenseKey

class LicenseKeySerializer(serializers.ModelSerializer):
    """ライセンスキーシリアライザ"""
    class Meta:
        model = LicenseKey
        fields = ['id', 'order_item', 'key', 'issued_at', 'expires_at']
        read_only_fields = ['id', 'issued_at']
</file>

<file path="marketplace/serializers/notification/notification.py">
# serializers/notification/notification.py
from rest_framework import serializers
from marketplace.models.notification.notification import Notification

class NotificationSerializer(serializers.ModelSerializer):
    """システム通知シリアライザ"""
    class Meta:
        model = Notification
        fields = ['id', 'user', 'type', 'message', 'is_read', 'created_at']
        read_only_fields = ['id', 'created_at']
</file>

<file path="marketplace/serializers/order/item.py">
# serializers/order/item.py
from rest_framework import serializers
from marketplace.models.order.item import OrderItem

class OrderItemSerializer(serializers.ModelSerializer):
    """注文アイテムシリアライザ"""
    class Meta:
        model = OrderItem
        fields = ['id', 'order', 'product', 'unit_price', 'quantity']
        read_only_fields = ['id', 'order']
</file>

<file path="marketplace/serializers/order/order.py">
# serializers/order/order.py
from rest_framework import serializers
from marketplace.models.order.order import Order
from .item import OrderItemSerializer

class OrderSerializer(serializers.ModelSerializer):
    """注文シリアライザ"""
    items = OrderItemSerializer(many=True, read_only=True)

    class Meta:
        model = Order
        fields = ['id', 'buyer', 'order_number', 'total_amount', 'currency', 'status', 'created_at', 'updated_at', 'items']
        read_only_fields = ['id', 'buyer', 'order_number', 'created_at', 'updated_at']
</file>

<file path="marketplace/serializers/payment/payment.py">
# serializers/payment/payment.py
from rest_framework import serializers
from marketplace.models.payment.payment import Payment

class PaymentSerializer(serializers.ModelSerializer):
    """決済情報シリアライザ"""
    class Meta:
        model = Payment
        fields = ['id', 'order', 'payment_method', 'payment_id', 'amount', 'currency', 'status', 'paid_at']
        read_only_fields = ['id', 'paid_at']
</file>

<file path="marketplace/serializers/product/asset.py">
# serializers/product/asset.py
from rest_framework import serializers
from marketplace.models.product.asset import ProductAsset

class ProductAssetSerializer(serializers.ModelSerializer):
    """商品アセットシリアライザ"""
    class Meta:
        model = ProductAsset
        fields = ['id', 'product', 'file', 'preview_image', 'asset_type', 'created_at']
        read_only_fields = ['id', 'created_at']
</file>

<file path="marketplace/serializers/product/category.py">
from rest_framework import serializers
from marketplace.models.product.category import Category

class CategorySerializer(serializers.ModelSerializer):
    """商品カテゴリシリアライザ"""
    class Meta:
        model = Category
        fields = ['id', 'name', 'slug', 'parent', 'created_at']
        read_only_fields = ['id', 'created_at']
</file>

<file path="marketplace/serializers/product/product.py">
# serializers/product/product.py
from rest_framework import serializers
from marketplace.models.product.product import Product
from .category import CategorySerializer
from .tag import TagSerializer
from .asset import ProductAssetSerializer

class ProductSerializer(serializers.ModelSerializer):
    """商品シリアライザ"""
    categories = CategorySerializer(many=True, read_only=True)
    tags = TagSerializer(many=True, read_only=True)
    assets = ProductAssetSerializer(many=True, read_only=True)

    class Meta:
        model = Product
        fields = ['id', 'seller', 'title', 'description', 'price', 'discount_price', 'status', 'categories', 'tags', 'assets', 'created_at', 'updated_at']
        read_only_fields = ['id', 'seller', 'created_at', 'updated_at']
</file>

<file path="marketplace/serializers/product/tag.py">
# serializers/product/tag.py
from rest_framework import serializers
from marketplace.models.product.tag import Tag

class TagSerializer(serializers.ModelSerializer):
    """商品タグシリアライザ"""
    class Meta:
        model = Tag
        fields = ['id', 'name', 'slug']
        read_only_fields = ['id']
</file>

<file path="marketplace/serializers/review/review.py">
# serializers/review/review.py
from rest_framework import serializers
from marketplace.models.review.review import Review

class ReviewSerializer(serializers.ModelSerializer):
    """商品レビューシリアライザ"""
    class Meta:
        model = Review
        fields = ['id', 'product', 'reviewer', 'rating', 'comment', 'created_at']
        read_only_fields = ['id', 'reviewer', 'created_at']
</file>

<file path="marketplace/serializers/user/activity.py">
# serializers/user/activity.py
from rest_framework import serializers
from marketplace.models.user.activity import ActivityLog

class ActivityLogSerializer(serializers.ModelSerializer):
    """ユーザー活動履歴シリアライザ"""
    class Meta:
        model = ActivityLog
        fields = ['id', 'user', 'action', 'ip_address', 'user_agent', 'created_at']
        read_only_fields = ['id', 'user', 'created_at']
</file>

<file path="marketplace/serializers/user/address.py">
# serializers/user/address.py
from rest_framework import serializers
from marketplace.models.user.address import Address

class AddressSerializer(serializers.ModelSerializer):
    """住所・連絡先シリアライザ"""
    class Meta:
        model = Address
        fields = ['id', 'user', 'type', 'line1', 'line2', 'city', 'state', 'postal_code', 'country', 'phone_number']
        read_only_fields = ['id', 'user']
</file>

<file path="marketplace/serializers/user/billing.py">
# serializers/user/billing.py
from rest_framework import serializers
from marketplace.models.user.billing import PaymentMethod, BillingRecord

class PaymentMethodSerializer(serializers.ModelSerializer):
    """支払い方法シリアライザ"""
    class Meta:
        model = PaymentMethod
        fields = ['id', 'user', 'type', 'details', 'is_default']
        read_only_fields = ['id', 'user']

class BillingRecordSerializer(serializers.ModelSerializer):
    """請求履歴シリアライザ"""
    class Meta:
        model = BillingRecord
        fields = ['id', 'user', 'amount', 'currency', 'description', 'created_at']
        read_only_fields = ['id', 'user', 'created_at']
</file>

<file path="marketplace/serializers/user/core.py">
# serializers/user/core.py
from rest_framework import serializers
from marketplace.models.user.core import User

class UserSerializer(serializers.ModelSerializer):
    """ユーザー認証情報シリアライザ"""
    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'is_active', 'is_staff', 'date_joined', 'last_login']
        read_only_fields = ['id', 'date_joined', 'last_login']
</file>

<file path="marketplace/serializers/user/preferences.py">
# serializers/user/preferences.py
from rest_framework import serializers
from marketplace.models.user.preferences import Preferences

class PreferencesSerializer(serializers.ModelSerializer):
    """ユーザー設定シリアライザ"""
    class Meta:
        model = Preferences
        fields = ['id', 'user', 'language', 'timezone', 'email_notifications']
        read_only_fields = ['id', 'user']
</file>

<file path="marketplace/serializers/user/profile.py">
# serializers/user/profile.py
from rest_framework import serializers
from marketplace.models.user.profile import Profile

class ProfileSerializer(serializers.ModelSerializer):
    """ユーザープロフィールシリアライザ"""
    class Meta:
        model = Profile
        fields = ['id', 'user', 'display_name', 'avatar', 'bio', 'website_url']
        read_only_fields = ['id', 'user']
</file>

<file path="marketplace/serializers/user/roles.py">
# serializers/user/roles.py
from rest_framework import serializers
from marketplace.models.user.roles import Role, UserRole

class RoleSerializer(serializers.ModelSerializer):
    """ロールシリアライザ"""
    class Meta:
        model = Role
        fields = ['id', 'name', 'permissions']
        read_only_fields = ['id']

class UserRoleSerializer(serializers.ModelSerializer):
    """ユーザーロール紐付けシリアライザ"""
    role = RoleSerializer(read_only=True)

    class Meta:
        model = UserRole
        fields = ['id', 'user', 'role']
        read_only_fields = ['id', 'user']
</file>

<file path="marketplace/serializers/wishlist/item.py">
# serializers/wishlist/item.py
from rest_framework import serializers
from marketplace.models.wishlist.item import WishlistItem

class WishlistItemSerializer(serializers.ModelSerializer):
    """ウィッシュリストアイテムシリアライザ"""
    class Meta:
        model = WishlistItem
        fields = ['id', 'wishlist', 'product', 'added_at']
        read_only_fields = ['id', 'wishlist', 'added_at']
</file>

<file path="marketplace/serializers/wishlist/wishlist.py">
# serializers/wishlist/wishlist.py
from rest_framework import serializers
from marketplace.models.wishlist.wishlist import Wishlist
from .item import WishlistItemSerializer

class WishlistSerializer(serializers.ModelSerializer):
    """ウィッシュリストシリアライザ"""
    items = WishlistItemSerializer(many=True, read_only=True)

    class Meta:
        model = Wishlist
        fields = ['id', 'user', 'created_at', 'items']
        read_only_fields = ['id', 'user', 'created_at']
</file>

<file path="marketplace/tests.py">
from django.test import TestCase

# Create your tests here.
</file>

<file path="marketplace/urls/auth.py">
from django.urls import path
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView

urlpatterns = [
    path('auth/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('auth/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
]
</file>

<file path="marketplace/urls/cart.py">
# marketplace/urls/cart.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from marketplace.views.cart.cart import CartViewSet
from marketplace.views.cart.item import CartItemViewSet

router = DefaultRouter()
router.register(r'carts', CartViewSet, basename='cart')
router.register(r'cart-items', CartItemViewSet, basename='cart-item')

urlpatterns = [
    path('', include(router.urls)),
]
</file>

<file path="marketplace/urls/license.py">
# marketplace/urls/license.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from marketplace.views.license.license_key import LicenseKeyViewSet
from marketplace.views.license.download import DownloadHistoryViewSet

router = DefaultRouter()
router.register(r'license-keys', LicenseKeyViewSet, basename='licensekey')
router.register(r'download-history', DownloadHistoryViewSet, basename='downloadhistory')

urlpatterns = [
    path('', include(router.urls)),
]
</file>

<file path="marketplace/urls/notification.py">
# marketplace/urls/license.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from marketplace.views.notification.notification import NotificationViewSet

router = DefaultRouter()
router.register(r'notifications', NotificationViewSet, basename='notification')

urlpatterns = [
    path('', include(router.urls)),
]
</file>

<file path="marketplace/urls/order.py">
# marketplace/urls/order.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from marketplace.views.order.order import OrderViewSet
from marketplace.views.order.item import OrderItemViewSet

router = DefaultRouter()
router.register(r'orders', OrderViewSet, basename='order')
router.register(r'order-items', OrderItemViewSet, basename='order-item')

urlpatterns = [
    path('', include(router.urls)),
]
</file>

<file path="marketplace/urls/payment.py">
# marketplace/urls/order.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from marketplace.views.payment.payment import PaymentViewSet

router = DefaultRouter()
router.register(r'payments', PaymentViewSet, basename='payment')

urlpatterns = [
    path('', include(router.urls)),
]
</file>

<file path="marketplace/urls/product.py">
# marketplace/urls/product.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from marketplace.views.product.category import CategoryViewSet
from marketplace.views.product.tag import TagViewSet
from marketplace.views.product.product import ProductViewSet
from marketplace.views.product.asset import ProductAssetViewSet

router = DefaultRouter()
router.register(r'products', ProductViewSet, basename='product')
router.register(r'categories', CategoryViewSet)
router.register(r'tags', TagViewSet)
router.register(r'product-assets', ProductAssetViewSet, basename='productasset')

urlpatterns = [
    path('', include(router.urls)),
]
</file>

<file path="marketplace/urls/review.py">
# marketplace/urls/order.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from marketplace.views.review.review import ReviewViewSet

router = DefaultRouter()
router.register(r'reviews', ReviewViewSet, basename='review')

urlpatterns = [
    path('', include(router.urls)),
]
</file>

<file path="marketplace/urls/user.py">
# marketplace/urls/user.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from marketplace.views.user.core import UserViewSet
from marketplace.views.user.profile import ProfileViewSet
from marketplace.views.user.preferences import PreferencesViewSet
from marketplace.views.user.roles import RoleViewSet, UserRoleViewSet
from marketplace.views.user.billing import PaymentMethodViewSet, BillingRecordViewSet
from marketplace.views.user.address import AddressViewSet
from marketplace.views.user.activity import ActivityLogViewSet

router = DefaultRouter()
router.register(r'users', UserViewSet)
router.register(r'profiles', ProfileViewSet, basename='profiles')
router.register(r'preferences', PreferencesViewSet, basename='preferences')
router.register(r'roles', RoleViewSet)
router.register(r'user-roles', UserRoleViewSet)
router.register(r'payment-methods', PaymentMethodViewSet, basename='payment-methods')
router.register(r'billing-records', BillingRecordViewSet, basename='billing-records')
router.register(r'addresses', AddressViewSet, basename='addresses')
router.register(r'activities', ActivityLogViewSet, basename='activities')

urlpatterns = [
    path('', include(router.urls)),
]
</file>

<file path="marketplace/urls/wishlist.py">
# marketplace/urls/wishlist.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from marketplace.views.wishlist.wishlist import WishlistViewSet
from marketplace.views.wishlist.item import WishlistItemViewSet

router = DefaultRouter()
router.register(r'wishlists', WishlistViewSet, basename='wishlist')
router.register(r'wishlist-items', WishlistItemViewSet, basename='wishlist-item')

urlpatterns = [
    path('', include(router.urls)),
]
</file>

<file path="marketplace/views.py">
from django.shortcuts import render

# Create your views here.
</file>

<file path="marketplace/views/cart/cart.py">
# marketplace/views/cart/cart.py
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from marketplace.models.cart.cart import Cart
from marketplace.serializers.cart.cart import CartSerializer

class CartViewSet(viewsets.ModelViewSet):
    """カートViewSet"""
    serializer_class = CartSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return Cart.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)
</file>

<file path="marketplace/views/cart/item.py">
# marketplace/views/cart/item.py
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from marketplace.models.cart.item import CartItem
from marketplace.serializers.cart.item import CartItemSerializer

class CartItemViewSet(viewsets.ModelViewSet):
    """カートアイテムViewSet"""
    serializer_class = CartItemSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return CartItem.objects.filter(cart__user=self.request.user)
</file>

<file path="marketplace/views/license/download.py">
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from marketplace.models.license.download import DownloadHistory
from marketplace.serializers.license.download import DownloadHistorySerializer

class DownloadHistoryViewSet(viewsets.ReadOnlyModelViewSet):
    """ダウンロード履歴閲覧ViewSet"""
    serializer_class = DownloadHistorySerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        # 認証ユーザー本人のダウンロード履歴のみ返す
        return DownloadHistory.objects.select_related('asset').filter(
            user=self.request.user
        )
</file>

<file path="marketplace/views/license/license_key.py">
### marketplace/views/license/license_key.py
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from marketplace.models.license.license_key import LicenseKey
from marketplace.serializers.license.license_key import LicenseKeySerializer

class LicenseKeyViewSet(viewsets.ReadOnlyModelViewSet):
    """ライセンスキー閲覧ViewSet"""
    serializer_class = LicenseKeySerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        # 認証ユーザー本人の注文アイテムに紐づくライセンスキーのみ返す
        return LicenseKey.objects.select_related('order_item').filter(
            order_item__order__buyer=self.request.user
        )
</file>

<file path="marketplace/views/notification/notification.py">
### marketplace/views/notification/notification.py
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from marketplace.models.notification.notification import Notification
from marketplace.serializers.notification.notification import NotificationSerializer

class NotificationViewSet(viewsets.ModelViewSet):
    """通知ViewSet"""
    serializer_class = NotificationSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        # 認証ユーザー本人への通知のみ返す
        return Notification.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        # create 時に user をリクエストユーザーに固定
        serializer.save(user=self.request.user)
</file>

<file path="marketplace/views/order/item.py">
### marketplace/views/order/item.py
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from marketplace.models.order.item import OrderItem
from marketplace.serializers.order.item import OrderItemSerializer

class OrderItemViewSet(viewsets.ReadOnlyModelViewSet):
    """注文アイテム閲覧ViewSet"""
    serializer_class = OrderItemSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        # 認証ユーザー本人の注文に紐づく OrderItem のみ返す
        return OrderItem.objects.select_related('order','product').filter(
            order__buyer=self.request.user
        )
</file>

<file path="marketplace/views/order/order.py">
### marketplace/views/order/order.py
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from marketplace.models.order.order import Order
from marketplace.serializers.order.order import OrderSerializer

class OrderViewSet(viewsets.ModelViewSet):
    """注文ViewSet"""
    serializer_class = OrderSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        # 認証ユーザー本人の注文のみ返す
        return Order.objects.prefetch_related('items').filter(
            buyer=self.request.user
        )

    def perform_create(self, serializer):
        # create 時に buyer を固定
        serializer.save(buyer=self.request.user)
</file>

<file path="marketplace/views/payment/payment.py">
### marketplace/views/payment/payment.py
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from marketplace.models.payment.payment import Payment
from marketplace.serializers.payment.payment import PaymentSerializer

class PaymentViewSet(viewsets.ReadOnlyModelViewSet):
    """支払い閲覧ViewSet"""
    serializer_class = PaymentSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        # 認証ユーザー本人の注文に紐づく支払いのみ返す
        return Payment.objects.select_related('order','payment_method').filter(
            order__buyer=self.request.user
        )
</file>

<file path="marketplace/views/product_views.py">
from rest_framework import viewsets
from marketplace.models.product import Product
from marketplace.serializers.product_serializer import ProductSerializer

class ProductViewSet(viewsets.ModelViewSet):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
</file>

<file path="marketplace/views/product/asset.py">
### marketplace/views/product/asset.py
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from marketplace.models.product.asset import ProductAsset
from marketplace.serializers.product.asset import ProductAssetSerializer

class ProductAssetViewSet(viewsets.ModelViewSet):
    """商品アセットViewSet"""
    serializer_class = ProductAssetSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        # 認証ユーザー本人が出品した商品に紐づくアセットのみ
        return ProductAsset.objects.filter(
            product__seller=self.request.user
        )
</file>

<file path="marketplace/views/product/category.py">
### marketplace/views/product/category.py
from rest_framework import viewsets
from rest_framework.permissions import IsAdminUser
from marketplace.models.product.category import Category
from marketplace.serializers.product.category import CategorySerializer

class CategoryViewSet(viewsets.ModelViewSet):
    """カテゴリ管理ViewSet（管理者専用）"""
    queryset = Category.objects.all()
    serializer_class = CategorySerializer
    permission_classes = [IsAdminUser]
</file>

<file path="marketplace/views/product/product.py">
### marketplace/views/product/product.py
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticatedOrReadOnly
from marketplace.models.product.product import Product
from marketplace.serializers.product.product import ProductSerializer

class ProductViewSet(viewsets.ModelViewSet):
    """商品ViewSet"""
    serializer_class = ProductSerializer
    permission_classes = [IsAuthenticatedOrReadOnly]

    def get_queryset(self):
        # 全ユーザーが閲覧可能なためフィルタ不要
        return Product.objects.prefetch_related('categories','tags','assets').all()

    def perform_create(self, serializer):
        # create 時に seller を認証ユーザーに固定
        serializer.save(seller=self.request.user)
</file>

<file path="marketplace/views/product/tag.py">
### marketplace/views/product/tag.py
from rest_framework import viewsets
from rest_framework.permissions import IsAdminUser
from marketplace.models.product.tag import Tag
from marketplace.serializers.product.tag import TagSerializer

class TagViewSet(viewsets.ModelViewSet):
    """タグ管理ViewSet（管理者専用）"""
    queryset = Tag.objects.all()
    serializer_class = TagSerializer
</file>

<file path="marketplace/views/review/review.py">
## 7. レビュー関連

### marketplace/views/review/review.py
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticatedOrReadOnly
from marketplace.models.review.review import Review
from marketplace.serializers.review.review import ReviewSerializer

class ReviewViewSet(viewsets.ModelViewSet):
    """レビューViewSet"""
    serializer_class = ReviewSerializer
    permission_classes = [IsAuthenticatedOrReadOnly]

    def get_queryset(self):
        # 全ユーザーが閲覧可能だが、編集・削除はレビュアー本人のみ
        return Review.objects.select_related('product','reviewer').all()

    def perform_create(self, serializer):
        # create 時に reviewer を認証ユーザーに固定
        serializer.save(reviewer=self.request.user)
</file>

<file path="marketplace/views/user/activity.py">
# marketplace/views/user/activity.py
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from marketplace.models.user.activity import ActivityLog
from marketplace.serializers.user.activity import ActivityLogSerializer

class ActivityLogViewSet(viewsets.ReadOnlyModelViewSet):
    """活動履歴の閲覧ViewSet"""
    serializer_class = ActivityLogSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        # 認証ユーザー本人の活動履歴のみ返す
        return ActivityLog.objects.filter(user=self.request.user)
</file>

<file path="marketplace/views/user/address.py">
# marketplace/views/user/address.py
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from marketplace.models.user.address import Address
from marketplace.serializers.user.address import AddressSerializer

class AddressViewSet(viewsets.ModelViewSet):
    """住所管理のViewSet"""
    serializer_class = AddressSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return Address.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)
</file>

<file path="marketplace/views/user/billing.py">
# marketplace/views/user/billing.py
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from marketplace.models.user.billing import PaymentMethod, BillingRecord
from marketplace.serializers.user.billing import PaymentMethodSerializer, BillingRecordSerializer

class PaymentMethodViewSet(viewsets.ModelViewSet):
    """支払い方法のViewSet"""
    queryset = PaymentMethod.objects.all()
    serializer_class = PaymentMethodSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return self.queryset.filter(user=self.request.user)

class BillingRecordViewSet(viewsets.ReadOnlyModelViewSet):
    """請求履歴のViewSet（閲覧のみ）"""
    queryset = BillingRecord.objects.all()
    serializer_class = BillingRecordSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return self.queryset.filter(user=self.request.user)
</file>

<file path="marketplace/views/user/core.py">
# marketplace/views/user/core.py
from rest_framework import viewsets
from rest_framework.permissions import IsAdminUser
from marketplace.models.user.core import User
from marketplace.serializers.user.core import UserSerializer

class UserViewSet(viewsets.ModelViewSet):
    """ユーザーコア情報のViewSet"""
    queryset = User.objects.all()
    serializer_class = UserSerializer
    permission_classes = [IsAdminUser]
</file>

<file path="marketplace/views/user/preferences.py">
### marketplace/views/user/preferences.py
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from marketplace.models.user.preferences import Preferences
from marketplace.serializers.user.preferences import PreferencesSerializer

class PreferencesViewSet(viewsets.ModelViewSet):
    """ユーザー設定ViewSet"""
    serializer_class = PreferencesSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        # 認証ユーザー本人の設定のみ
        return Preferences.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)
</file>

<file path="marketplace/views/user/profile.py">
### marketplace/views/user/profile.py
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from marketplace.models.user.profile import Profile
from marketplace.serializers.user.profile import ProfileSerializer

class ProfileViewSet(viewsets.ModelViewSet):
    """ユーザープロフィールViewSet"""
    serializer_class = ProfileSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        # 認証ユーザー本人のプロフィールのみ
        return Profile.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)
</file>

<file path="marketplace/views/user/roles.py">
# marketplace/views/user/roles.py
from rest_framework import viewsets
from rest_framework.permissions import IsAdminUser
from marketplace.models.user.roles import Role, UserRole
from marketplace.serializers.user.roles import RoleSerializer, UserRoleSerializer

class RoleViewSet(viewsets.ModelViewSet):
    """ロール管理のViewSet"""
    queryset = Role.objects.all()
    serializer_class = RoleSerializer
    permission_classes = [IsAdminUser]

class UserRoleViewSet(viewsets.ModelViewSet):
    """ユーザーとロール紐付けViewSet"""
    queryset = UserRole.objects.select_related('user','role').all()
    serializer_class = UserRoleSerializer
    permission_classes = [IsAdminUser]
</file>

<file path="marketplace/views/wishlist/item.py">
# marketplace/views/wishlist/item.py
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from marketplace.models.wishlist.item import WishlistItem
from marketplace.serializers.wishlist.item import WishlistItemSerializer

class WishlistItemViewSet(viewsets.ModelViewSet):
    """ウィッシュリストアイテムViewSet"""
    serializer_class = WishlistItemSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return WishlistItem.objects.filter(wishlist__user=self.request.user)
</file>

<file path="marketplace/views/wishlist/wishlist.py">
# marketplace/views/wishlist/wishlist.py
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from marketplace.models.wishlist.wishlist import Wishlist
from marketplace.serializers.wishlist.wishlist import WishlistSerializer

class WishlistViewSet(viewsets.ModelViewSet):
    """ウィッシュリストViewSet"""
    serializer_class = WishlistSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return Wishlist.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)
</file>

<file path="requirements.txt">
asgiref==3.8.1
Django==5.2
djangorestframework==3.16.0
sqlparse==0.5.3
tzdata==2025.2
</file>

</files>
